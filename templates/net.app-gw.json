{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"timestamp": {
			"type": "string",
			"defaultValue": "[utcNow('u')]"
		},
		"location": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"displayName": "Azure region",
				"description": "See https://azure.microsoft.com/regions/."
			}
		},
		"appGatewayName": {
			"type": "string",
			"defaultValue": ""
		},
		"skuName": {
			"type": "string",
			"defaultValue": "WAF_v2",
			"allowedValues": [
				"WAF_v2",
				"Standard_v2"
			]
		},
		"availabilityZones": {
			"type": "string",
			"defaultValue": "1,2,3",
			"metadata": {
				"displayName": "Azure availability zone(s) (AZs)",
				"description": "Optional. One or more AZs, comma-delimited. Example: 1,2,3. If not provided, a non-zonal App GW will be deployed. See https://azure.microsoft.com/regions/ for which regions support AZs."
			}
		},
		"managedIdentityType": {
			"type": "string",
			"defaultValue": "None",
			"allowedValues": [
				"SystemAssigned",
				"UserAssigned",
				"None"
			]
		},
		"identityResourceId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"displayName": "User-Assigned Identity Resource ID",
				"description": "If Identity Type set to UserAssigned, provide the UAI Resource ID here in ARM format, i.e. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}"
			}
		},
        "vnetResourceGroup": {
            "type": "string",
			"defaultValue": ""
        },
        "vnetName": {
            "type": "string",
			"defaultValue": ""
        },
        "subnetName": {
            "type": "string",
			"defaultValue": ""
        },
		"publicIpResourceGroup": {
            "type": "string",
			"defaultValue": ""
		},
		"publicIpName": {
            "type": "string",
			"defaultValue": ""
		},
		"frontEndIpName": {
			"type": "string",
			"defaultValue": "appGatewayFrontEndIp"
		},
		"frontEndIpPrivateAllocationMethod": {
			"type": "string",
			"defaultValue": "Dynamic",
			"allowedValues": [
				"Dynamic",
				"Static"
			],
			"metadata": {
				"displayName": "Public IP address type",
				"description": "The public IP address type: Static or Dynamic."
			}
		},
		"frontEndPortName": {
			"type": "string",
			"defaultValue": "appGatewayFrontEndPort"
		},
		"backEndPoolName": {
			"type": "string",
			"defaultValue": "appGatewayBackEndPool"
		},
		"backendHttpSettingsCollectionName": {
			"type": "string",
			"defaultValue": "appGatewayBackEndHttpSettings"
		},
		"httpListenerName": {
			"type": "string",
			"defaultValue": "appGatewayHttpListener"
		},
		"backEndConnectionDrainingEnabled": {
			"type": "bool",
			"defaultValue": true
		},
		"backEndConnectionDrainingTimeout": {
			"type": "int",
			"defaultValue": 60
		},
		"wafEnabled": {
			"type": "bool",
			"defaultValue": true
		},
		"wafMode": {
			"type": "string",
			"defaultValue": "Detection",
			"allowedValues": [
				"Detection",
				"Prevention"
			]
		},
		"enableHttp2": {
			"type": "bool",
			"defaultValue": true
		},
		"autoscaleMinCapacity": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 0,
			"maxValue": 10
		},
		"autoscaleMaxCapacity": {
			"type": "int",
			"defaultValue": 5,
			"minValue": 1,
			"maxValue": 125
		}
	},
	"variables": {
		"userAssignedIdentities": "[
			if
			(
				equals(toLower(parameters('managedIdentityType')), 'userassigned'),
				createObject
				(
					parameters('identityResourceId'),
					createObject()
				),
				json('null')
			)
		]",
        "vnetId": "[if(or(empty(parameters('vnetResourceGroup')), empty(parameters('vnetName'))), json('null'), resourceId(parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName')))]",
        "subnetId": "[if(or(empty(variables('vnetId')), empty(parameters('subnetName'))), json('null'), concat(variables('vnetId'), '/subnets/', parameters('subnetName')))]",
		"publicIpId": "[resourceId(parameters('publicIpResourceGroup'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]",
		"wafConfig": "[
			if
			(
				equals(parameters('skuName'), 'WAF_v2'),
				createObject
				(
                    'enabled', parameters('wafEnabled'),
                    'firewallMode', parameters('wafMode'),
                    'ruleSetType', 'OWASP',
                    'ruleSetVersion', '3.0',
                    'requestBodyCheck', 'true',
                    'maxRequestBodySizeInKb', 128,
                    'fileUploadLimitInMb', 100
				),
				json('null')
			)
		]",
		"resourceTags": {
			"Timestamp": "[parameters('timestamp')]"
		},
		"apiVersionNetwork": "2020-11-01"
	},
    "resources": [
        {
			"name": "[parameters('appGatewayName')]",
            "type": "Microsoft.Network/applicationGateways",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"location": "[parameters('location')]",
			"zones": "[
				if
				(
					empty(parameters('availabilityZones')),
					json('[]'),
					split(parameters('availabilityZones'), ',')
				)
			]",
			"tags": "[variables('resourceTags')]",
			"identity": {
				"type": "[parameters('managedIdentityType')]",
				"userAssignedIdentities": "[variables('userAssignedIdentities')]"
			},
            "properties": {
                "sku": {
                    "name": "[parameters('skuName')]",
                    "tier": "[parameters('skuName')]"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "[parameters('frontEndIpName')]",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetId')]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "[parameters('frontEndIpName')]",
                        "properties": {
                            "privateIPAllocationMethod": "[parameters('frontEndIpPrivateAllocationMethod')]",
                            "publicIPAddress": {
                                "id": "[variables('publicIpId')]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "[parameters('frontEndPortName')]",
                        "properties": {
                            "port": 80
                        }
                    }
                ],
                "sslCertificates": [],
                "trustedRootCertificates": [],
                "trustedClientCertificates": [],
                "sslProfiles": [],
                "backendAddressPools": [
                    {
                        "name": "[parameters('backEndPoolName')]",
                        "properties": {
                            "backendAddresses": []
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "[parameters('backendHttpSettingsCollectionName')]",
                        "properties": {
                            "port": 80,
                            "protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "connectionDraining": {
                                "enabled": "[parameters('backEndConnectionDrainingEnabled')]",
                                "drainTimeoutInSec": "[parameters('backEndConnectionDrainingTimeout')]"
                            },
                            "pickHostNameFromBackendAddress": false,
                            "requestTimeout": 30
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "[parameters('httpListenerName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '/frontendIPConfigurations/', parameters('frontEndIpName'))]"
                            },
                            "frontendPort": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '/frontendPorts/', parameters('frontEndPortName'))]"
                            },
                            "protocol": "Http",
                            "hostNames": [],
                            "requireServerNameIndication": false
                        }
                    }
                ],
                "urlPathMaps": [],
                "requestRoutingRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "ruleType": "Basic",
                            "httpListener": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '/httpListeners/', parameters('httpListenerName'))]"
                            },
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '/backendAddressPools/', parameters('backEndPoolName'))]"
                            },
                            "backendHttpSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '/backendHttpSettingsCollection/', parameters('backendHttpSettingsCollectionName'))]"
                            }
                        }
                    }
                ],
                "probes": [],
                "rewriteRuleSets": [],
                "redirectConfigurations": [],
                "privateLinkConfigurations": [],
                "webApplicationFirewallConfiguration": "[variables('wafConfig')]",
                "enableHttp2": "[parameters('enableHttp2')]",
                "autoscaleConfiguration": {
                    "minCapacity": "[parameters('autoscaleMinCapacity')]",
                    "maxCapacity": "[parameters('autoscaleMaxCapacity')]"
                }
            }
        }
    ]
}