name: AO.Infra.Region.Deploy

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '42'

  RBAC_ROLE_ID_CONTRIBUTOR: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
  RBAC_ROLE_ID_READER: 'acdd72a7-3385-48ef-bd42-f606fba81ae7'
  RBAC_ROLE_ID_MANAGED_ID_OPERATOR: 'f1a07417-d97a-45cb-824c-7a7467783830'
  RBAC_ROLE_ID_NETWORK_CONTRIBUTOR: '4d97b98b-1d4f-4787-a291-c67834d212e7'
  RBAC_ROLE_ID_VM_CONTRIBUTOR: '9980e02c-c2be-4d73-94e8-173b1dc7cf3c'
  RBAC_ROLE_ID_ACR_PULL: '7f951dda-4ed3-4680-a7ca-43fe172d538d'
  RBAC_ROLE_EVENT_HUBS_DATA_RECEIVER: 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde'
  RBAC_ROLE_EVENT_HUBS_DATA_SENDER: '2b629674-e913-4c01-ae53-ef4638d8f975'
  RBAC_ROLE_STORAGE_BLOB_DATA_CONTRIBUTOR: 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'
  AZURE_LOCATION_GLOBAL: 'eastus2'

  NSG_IN_SRC: '75.68.47.183/32'

  AVL_ZONES: '1,2,3'

  IDENTITY_TYPE: 'UserAssigned'

  VNET_ENABLE_DDOS: 'false'
  VNET_PREFIX: '10.0.0.0/16'
  APIM_SUBNET_NAME: 'apim'
  APIM_SUBNET_PREFIX: '10.0.1.0/24'
  APIM_SUBNET_FRONTDOOR_INBOUND_ONLY: 'true'
  APPGW_SUBNET_NAME: 'appgw'
  APPGW_SUBNET_PREFIX: '10.0.2.0/24'
  APP_SUBNET_NAME: 'app'
  APP_SUBNET_PREFIX: '10.0.5.0/24'
  APP_SUBNET_SERVICE_ENDPOINTS: 'Microsoft.AzureCosmosDB,Microsoft.EventHub,Microsoft.KeyVault'

  STORAGE_CONTAINER_NAME: 'ehproc'

  EVENT_HUB_CAPACITY: 4
  EVENT_HUB_PARTITION_COUNT: 32
  EVENT_HUB_EVENT_HUB_NAME: 'eh1'
  EVENT_HUB_CONSUMER_GROUP_NAME: 'ao'
  EVENT_HUB_AUTH_RULE_NAME: 'SendListen'
  EVENT_HUB_AUTH_RULE_RIGHTS: 'Send,Listen'

  AKS_ZONES_FOR_CLI: '1 2 3'
  AKS_VERSION: '1.20.7'
  AKS_NET_PLUGIN: 'kubenet'
  AKS_SERVICE_CIDR: '10.1.0.0/16'
  AKS_DNS_SERVICE_IP: '10.1.0.10'
  AKS_POD_CIDR: '10.241.0.0/16'
  AKS_DOCKER_BRIDGE_ADDRESS: '172.17.0.1/16'

  AKS_ENABLE_RBAC: 'true'
  AKS_POD_IDENTITY_ENABLED: 'true'
  AKS_POD_IDENTITY_KUBENET_ENABLED: 'true'
  AKS_POD_IDENTITY_NAMESPACE: 'default'

  AKS_SYSTEM_POOL_NAME: 'syspool1'
  AKS_SYSTEM_POOL_NODE_COUNT: '1'
  AKS_SYSTEM_POOL_AUTOSCALE: 'true'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN: '1'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX: '4'
  AKS_SYSTEM_POOL_NODE_SIZE: 'Standard_D2s_v3'
  AKS_SYSTEM_POOL_NODE_DISK_SIZE_GB: '60'

  AKS_USER_POOL_DEPLOY: 'true'
  AKS_USER_POOL_NAME: 'aopool1'
  AKS_USER_POOL_NODE_COUNT: '3'
  AKS_USER_POOL_AUTOSCALE: 'true'
  AKS_USER_POOL_AUTOSCALE_COUNT_MIN: '3'
  AKS_USER_POOL_AUTOSCALE_COUNT_MAX: '8'
  AKS_USER_POOL_NODE_SIZE: 'Standard_F8s_v2'
  AKS_USER_POOL_NODE_DISK_SIZE_GB: '60'
  AKS_USER_POOL_NODE_LABELS: '{\"aoapp\": \"always-on\"}'

  APPGW_SKU_NAME: 'WAF_v2'
  #APPGW_SKU_NAME: 'Standard_v2'

  APIM_DEPLOY: 'true'
  APIM_SKU_NAME: 'Developer'
  #APIM_SKU_NAME: 'Premium'
  APIM_PUBLIC_IP_INFIX: '-apim-d-'  # d or p (Developer or Premium) for clarity in scaling operations, where we need separate PIP to change APIM SKU
  APIM_VNET_TYPE: 'External'
  APIM_SCALE_UNITS: 9   # Must be a multiple of AZs. Will be overridden in template if exceeds SKU max.
  APIM_API_VERSION: 'v1'
  APIM_API_ID: 'aofe'
  APIM_API_DISPLAY_NAME: 'AlwaysOn Front End API'
  APIM_API_DESCRIPTION: 'AlwaysOn Front End API'
  APIM_API_SERVICE_PATH: '/'

  FRONT_DOOR_ORIGIN_GROUP_NAME: 'apims'
  FRONT_DOOR_ROUTE_NAME: 'aoferoute'

jobs:
  deploy-region:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus2,westus2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI Extensions
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: Prepare dynamic env vars
        if: success()
        run: |
          STORAGE_ACCOUNT_NAME=${PREFIX//-/}${{ env.SUFFIX }}${{ matrix.region }}
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          UAMI_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          APP_NSG_NAME=app-${{ matrix.region }}
          APIM_NSG_NAME=apim-${{ matrix.region }}
          DDOS_PLAN_NAME=${{ env.PREFIX }}
          VNET_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          KEY_VAULT_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}

          LA_WORKSPACE_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          APP_INSIGHTS_NAME=${{ env.PREFIX }}-${{ matrix.region }}

          REGISTRY_NAME=${PREFIX//-/}${{ env.SUFFIX }}
          EVENT_HUB_NS_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          APPGW_PUBLIC_IP_NAME=${{ env.PREFIX }}-appgw-${{ matrix.region }}
          APPGW_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          APPGW_FQDN=$APPGW_PUBLIC_IP_NAME.${{ matrix.region }}.cloudapp.azure.com
          AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          AKS_DNS_PREFIX=${AKS_CLUSTER_NAME//-/}
          AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP-$AKS_CLUSTER_NAME
          AKS_POD_IDENTITY_BINDING_SELECTOR=$UAMI_NAME-binding
          APIM_PUBLIC_IP_NAME=${{ env.PREFIX }}${{ env.APIM_PUBLIC_IP_INFIX }}${{ matrix.region }}
          APIM_SERVICE_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}
          FRONT_DOOR_NAME=${{ env.PREFIX }}
          FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_NAME

          echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "UAMI_NAME=$UAMI_NAME" >> $GITHUB_ENV
          echo "APP_NSG_NAME=$APP_NSG_NAME" >> $GITHUB_ENV
          echo "APIM_NSG_NAME=$APIM_NSG_NAME" >> $GITHUB_ENV
          echo "DDOS_PLAN_NAME=$DDOS_PLAN_NAME" >> $GITHUB_ENV
          echo "VNET_NAME=$VNET_NAME" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$KEY_VAULT_NAME" >> $GITHUB_ENV

          echo "LA_WORKSPACE_NAME=$LA_WORKSPACE_NAME" >> $GITHUB_ENV
          echo "APP_INSIGHTS_NAME=$APP_INSIGHTS_NAME" >> $GITHUB_ENV

          echo "APP_INSIGHTS_NAME=$APP_INSIGHTS_NAME" >> $GITHUB_ENV
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_NAME=$EVENT_HUB_NS_NAME" >> $GITHUB_ENV
          echo "APPGW_PUBLIC_IP_NAME=$APPGW_PUBLIC_IP_NAME" >> $GITHUB_ENV
          echo "APPGW_NAME=$APPGW_NAME" >> $GITHUB_ENV
          echo "APPGW_FQDN=$APPGW_FQDN" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_DNS_PREFIX=$AKS_DNS_PREFIX" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP_AKS_NODES" >> $GITHUB_ENV
          echo "AKS_POD_IDENTITY_BINDING_SELECTOR=$AKS_POD_IDENTITY_BINDING_SELECTOR" >> $GITHUB_ENV
          echo "APIM_PUBLIC_IP_NAME=$APIM_PUBLIC_IP_NAME" >> $GITHUB_ENV
          echo "APIM_SERVICE_NAME=$APIM_SERVICE_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_NAME=$FRONT_DOOR_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_ENDPOINT_NAME" >> $GITHUB_ENV

          echo "AZURE_CRED_SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.SP_CLIENT_ID }} -o tsv --query 'objectId')" >> $GITHUB_ENV
          echo "FRONT_DOOR_ORIGIN_GROUP_ID=$(az afd origin-group show --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} -g ${{env.AZURE_RESOURCE_GROUP_GLOBAL}} --profile-name $FRONT_DOOR_NAME --origin-group-name ${{env.FRONT_DOOR_ORIGIN_GROUP_NAME}} -o tsv --query 'id')" >> $GITHUB_ENV


      - name: Create Regional Always On Resource Group
        if: success()
        run: |
          az group create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location ${{ matrix.region }} --name ${{ env.AZURE_RESOURCE_GROUP }}


      - name: Deploy Log Analytics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./src/infra-deploy/templates/monitor.log-analytics-workspace.json
          parameters: location=${{ matrix.region }} workspaceName=${{env.LA_WORKSPACE_NAME}}

      - name: Get Log Analytics Workspace ID
        if: success()
        run: |
          echo "LA_WORKSPACE_ID=$(az monitor log-analytics workspace show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{env.LA_WORKSPACE_NAME}} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Deploy Log Analytics Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./src/infra-deploy/templates/monitor.log-analytics-workspace.diagnostics.json
          parameters: workspaceName=${{env.LA_WORKSPACE_NAME}} logAnalyticsWorkspaceResourceId="${{env.LA_WORKSPACE_ID}}"


      - name: Deploy Network Watcher
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: NetworkWatcherRG
          deploymentName: NetworkWatcher-${{ matrix.region }}
          template: ./src/infra-deploy/templates/net.network-watcher.json
          parameters: location=${{ matrix.region }} networkWatcherName="NetworkWatcher_""${{ matrix.region }}"

      - name: Deploy Storage Account for Regional NSG Flow Logs and Event Hub Checkpoint Management
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.STORAGE_ACCOUNT_NAME }}
          template: ./src/infra-deploy/templates/storage.account.json
          parameters: location=${{ matrix.region }} storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }} defaultAction=Allow

      - name: Get Storage Account ID
        if: success()
        run: |
          echo "STORAGE_ACCOUNT_ID=$(az storage account show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.STORAGE_ACCOUNT_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Deploy Storage Container for regional Event Hub Processors
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.STORAGE_ACCOUNT_NAME }}
          template: ./src/infra-deploy/templates/storage.container.json
          parameters: storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }} containerName=${{ env.STORAGE_CONTAINER_NAME }}

      - name: Deploy Storage Account Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.STORAGE_ACCOUNT_NAME }}-diag
          template: ./src/infra-deploy/templates/storage.account.diagnostics.json
          parameters: storageAccountName=${{ env.STORAGE_ACCOUNT_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}


      - name: Deploy User-Assigned MI
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./src/infra-deploy/templates/identity.user-assigned-mi.json
          parameters: location=${{ matrix.region }} tenantId=${{secrets.AZURE_TENANT_ID}} identityName=${{env.UAMI_NAME}}


      - name: Deploy NSG for APIM Subnet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_NSG_NAME }}
          template: ./src/infra-deploy/templates/apim.nsg.json
          parameters: location=${{ matrix.region }} nsgName=${{ env.APIM_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} allowTrafficOnlyFromFrontDoor=${{ env.APIM_SUBNET_FRONTDOOR_INBOUND_ONLY }}

      - name: Deploy NSG for APIM Subnet Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_NSG_NAME }}-diag
          template: ./src/infra-deploy/templates/net.nsg.diagnostics.json
          parameters: nsgName=${{ env.APIM_NSG_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy NSG for App Subnet without AppGW source address
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APP_NSG_NAME }}
          template: ./src/infra-deploy/templates/net.nsg.json
          parameters: location=${{ matrix.region }} nsgName=${{ env.APP_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} 

      - name: Deploy NSG for App Subnet Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APP_NSG_NAME }}-diag
          template: ./src/infra-deploy/templates/net.nsg.diagnostics.json
          parameters: nsgName=${{ env.APP_NSG_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get NSG Info
        if: success()
        run: |
          echo "APIM_NSG_ID=$(az network nsg show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_NSG_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_NSG_ID=$(az network nsg show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APP_NSG_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Deploy NSG Flow Logs for APIM NSG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_NSG_NAME }}-flow
          template: ./src/infra-deploy/templates/net.nsg.flow-log.json
          parameters: location=${{ matrix.region }} flowLogName="${{ env.AZURE_RESOURCE_GROUP }}""-""${{ env.APIM_NSG_NAME }}""-flow" nsgResourceId="${{ env.APIM_NSG_ID }}" storageAccountResourceId="${{ env.STORAGE_ACCOUNT_ID }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"  

      - name: Deploy NSG Flow Logs for App NSG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APP_NSG_NAME }}-flow
          template: ./src/infra-deploy/templates/net.nsg.flow-log.json
          parameters: location=${{ matrix.region }} flowLogName="${{ env.AZURE_RESOURCE_GROUP }}""-""${{ env.APP_NSG_NAME }}""-flow" nsgResourceId="${{ env.APP_NSG_ID }}" storageAccountResourceId="${{ env.STORAGE_ACCOUNT_ID }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"  


      - name: Deploy VNet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.VNET_NAME }}
          template: ./src/infra-deploy/templates/net.vnet.json
          parameters: |
            location=${{ matrix.region }} vnetName=${{ env.VNET_NAME }} vnetPrefix=${{ env.VNET_PREFIX }} enableDdosProtection=${{ env.VNET_ENABLE_DDOS }} ddosProtectionPlanResourceGroup=${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} ddosProtectionPlanName=${{ env.DDOS_PLAN_NAME }}

      - name: Deploy VNet Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.VNET_NAME }}-diag
          template: ./src/infra-deploy/templates/net.vnet.diagnostics.json
          parameters: vnetName=${{ env.VNET_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy APIM Subnet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SUBNET_NAME }}
          template: ./src/infra-deploy/templates/net.vnet.subnet.json
          parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APIM_SUBNET_NAME }} subnetPrefix=${{ env.APIM_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APIM_NSG_NAME }}

      - name: Deploy AppGW Subnet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_SUBNET_NAME }}
          template: ./src/infra-deploy/templates/net.vnet.subnet.json
          parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APPGW_SUBNET_NAME }} subnetPrefix=${{ env.APPGW_SUBNET_PREFIX }}

      - name: Deploy App Subnet
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APP_SUBNET_NAME }}
          template: ./src/infra-deploy/templates/net.vnet.subnet.json
          parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APP_SUBNET_NAME }} subnetPrefix=${{ env.APP_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APP_NSG_NAME }} serviceEndpoints=${{ env.APP_SUBNET_SERVICE_ENDPOINTS }}


      - name: Get Subnet Resource IDs
        if: success()
        run: |
          echo "APIM_SUBNET_ID=$(az network vnet subnet show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --vnet-name ${{ env.VNET_NAME }} -n ${{ env.APIM_SUBNET_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_SUBNET_ID=$(az network vnet subnet show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --vnet-name ${{ env.VNET_NAME }} -n ${{ env.APP_SUBNET_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      - name: Get UAMI Info
        if: success()
        run: |
          echo "UAMI_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.UAMI_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "UAMI_PRINCIPAL_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.UAMI_NAME }} -o tsv --query 'principalId')" >> $GITHUB_ENV
          echo "UAMI_CLIENT_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.UAMI_NAME }} -o tsv --query 'clientId')" >> $GITHUB_ENV

      - name: Grant UAMI Contributor on Region RG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP }}-rbac-contrib
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      - name: Grant UAMI Managed Identity Operator on Region RG for AKS AAD Pod Identity
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP }}-rbac-mio
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_MANAGED_ID_OPERATOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      - name: Grant UAMI Network Contributor on VNet for kubenet config
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.VNET_NAME }}-rbac-net-contrib
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_NETWORK_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.Network/virtualNetworks" resourceName=${{ env.VNET_NAME }}


      - name: Deploy App Insights
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./src/infra-deploy/templates/monitor.app-insights.json
          parameters: location=${{ matrix.region }} appInsightsName=${{env.APP_INSIGHTS_NAME}} logAnalyticsWorkspaceResourceId="${{env.LA_WORKSPACE_ID}}"

      - name: Get App Insights Info
        if: success()
        run: |
          echo "APP_INSIGHTS_ID=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --app $APP_INSIGHTS_NAME -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_INSIGHTS_INSTRUMENTATION_KEY=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --app $APP_INSIGHTS_NAME -o tsv --query 'instrumentationKey')" >> $GITHUB_ENV

      - name: Deploy App Insights Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
          template: ./src/infra-deploy/templates/monitor.app-insights.diagnostics.json
          parameters: appInsightsName=${{env.APP_INSIGHTS_NAME}} logAnalyticsWorkspaceResourceId="${{env.LA_WORKSPACE_ID}}"


      - name: Deploy Key Vault
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.KEY_VAULT_NAME }}
          template: ./src/infra-deploy/templates/key-vault.json
          parameters: location=${{ matrix.region }} tenantId=${{ secrets.AZURE_TENANT_ID }} keyVaultName=${{ env.KEY_VAULT_NAME }}

      - name: Deploy Key Vault Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.KEY_VAULT_NAME }}-diag
          template: ./src/infra-deploy/templates/key-vault.diagnostics.json
          parameters: keyVaultName=${{ env.KEY_VAULT_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Grant Key Vault access permissions to current authentication context to get/set/list certs, secrets and keys
        if: success()
        run: |
          az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
            -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
            --object-id ${{ env.AZURE_CRED_SP_OBJECT_ID }} \
            --key-permissions backup create decrypt delete encrypt get import list purge recover restore sign unwrapKey update verify wrapKey \
            --secret-permissions backup delete get list purge recover restore set \
            --certificate-permissions backup create delete deleteissuers get getissuers import list listissuers managecontacts manageissuers purge recover restore setissuers update

      - name: Grant Key Vault access permissions to UAMI to get certs, secrets and keys
        if: success()
        run: |
          az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
            -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
            --object-id ${{ env.UAMI_PRINCIPAL_ID }} \
            --key-permissions get \
            --secret-permissions get \
            --certificate-permissions get


      - name: Grant UAMI Storage Data Contributor on Storage Account
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.STORAGE_ACCOUNT_NAME }}-rbac-sdc
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_STORAGE_BLOB_DATA_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.Storage/storageAccounts" resourceName=${{ env.STORAGE_ACCOUNT_NAME }}


      - name: Deploy Event Hub Namespace
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}
          template: ./src/infra-deploy/templates/event-hub.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} capacity=${{ env.EVENT_HUB_CAPACITY }}

      - name: Deploy Event Hub Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-diag
          template: ./src/infra-deploy/templates/event-hub.diagnostics.json
          parameters: namespaceName=${{ env.EVENT_HUB_NS_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy Event Hub Namespace Auth Rule
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-rule-send
          template: ./src/infra-deploy/templates/event-hub.ns-auth-rule.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} rights="${{ env.EVENT_HUB_AUTH_RULE_RIGHTS }}" ruleName="${{ env.EVENT_HUB_AUTH_RULE_NAME }}"

      - name: Deploy Event Hub
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-${{ env.EVENT_HUB_EVENT_HUB_NAME }}
          template: ./src/infra-deploy/templates/event-hub.event-hub.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }} partitionCount=${{ env.EVENT_HUB_PARTITION_COUNT }}

      - name: Deploy Event Hub Consumer Group
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}
          template: ./src/infra-deploy/templates/event-hub.consumer-group.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }} consumerGroupName=${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}

      - name: Deploy Event Hub Network Rule Set
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-net-ruleset
          template: ./src/infra-deploy/templates/event-hub.network-rule-set.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }} inboundAllowedIp=${{ env.NSG_IN_SRC }}

      - name: Deploy Event Hub VNet Rule
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-vnet-rule
          template: ./src/infra-deploy/templates/event-hub.vnet-rule.json
          parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }}

      - name: Grant UAMI Event Hubs Data Sender on Region Event Hub
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-rbac-sender
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_EVENT_HUBS_DATA_SENDER }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.EventHub/namespaces" resourceName=${{ env.EVENT_HUB_NS_NAME }}

      - name: Grant UAMI Event Hubs Data Receiver on Region Event Hub
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-rbac-sender
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_EVENT_HUBS_DATA_RECEIVER }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.EventHub/namespaces" resourceName=${{ env.EVENT_HUB_NS_NAME }}



      - name: Deploy Public IP for App GW
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_PUBLIC_IP_NAME }}
          template: ./src/infra-deploy/templates/net.public-ip.json
          parameters: location=${{ matrix.region }} publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }} availabilityZones=${{ env.AVL_ZONES }} publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APPGW_PUBLIC_IP_NAME }}

      - name: Deploy Public IP for App GW Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_PUBLIC_IP_NAME }}-diag
          template: ./src/infra-deploy/templates/net.public-ip.diagnostics.json
          parameters: publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get App GW Public IP and FQDN
        if: success()
        run: |
          echo "APPGW_PUBLIC_IP_ADDRESS=$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'ipAddress')" >> $GITHUB_ENV
          echo "APPGW_FQDN=$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'dnsSettings.fqdn')" >> $GITHUB_ENV

      - name: Re-Deploy NSG for App Subnet with App GW Public IP
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APP_NSG_NAME }}
          template: ./src/infra-deploy/templates/aks.nsg.json
          parameters: location=${{ matrix.region }} nsgName=${{ env.APP_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} ingressRuleInbound110Src=${{ env.APPGW_PUBLIC_IP_ADDRESS }}


      - name: Deploy App GW
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_NAME }}
          template: ./src/infra-deploy/templates/net.app-gw.json
          parameters: location=${{ matrix.region }} appGatewayName=${{ env.APPGW_NAME }} skuName=${{ env.APPGW_SKU_NAME }} availabilityZones=${{ env.AVL_ZONES }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} vnetResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APPGW_SUBNET_NAME }} publicIpResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }}

      - name: Deploy App GW Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_NAME }}-diag
          template: ./src/infra-deploy/templates/net.app-gw.diagnostics.json
          parameters: appGatewayName=${{ env.APPGW_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get App GW Resource ID
        if: success()
        run: echo "APPGW_ID=$(az network application-gateway show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Deploy App Insights Availability Test for App GW
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APPGW_NAME }}-avl-test
          template: ./src/infra-deploy/templates/monitor.app-insights.web-test.json
          parameters: location=${{ matrix.region }} appInsightsName=${{ env.APP_INSIGHTS_NAME }} webTestName="appgw-${{ env.APPGW_NAME }}" testUrl="http://${{ env.APPGW_FQDN }}"


      - name: Deploy AKS Cluster (ARM)
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AKS_CLUSTER_NAME }}
          template: ./src/infra-deploy/templates/aks.cluster.json
          parameters: location=${{ matrix.region }} k8sversion=${{ env.AKS_VERSION }} clusterName=${{ env.AKS_CLUSTER_NAME }} dnsPrefix=${{ env.AKS_DNS_PREFIX }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityName=${{ env.UAMI_NAME }} identityResourceId=${{ env.UAMI_ID }} identityClientId=${{ env.UAMI_CLIENT_ID }} identityObjectId=${{ env.UAMI_PRINCIPAL_ID }} availabilityZones=${{ env.AVL_ZONES }} nodeResourceGroup=${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }} enableRBAC=${{ env.AKS_ENABLE_RBAC }} systemPoolName=${{ env.AKS_SYSTEM_POOL_NAME }} nodeCount=${{ env.AKS_SYSTEM_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_SYSTEM_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_SYSTEM_POOL_NODE_SIZE }} osDiskSizeGB=${{ env.AKS_SYSTEM_POOL_NODE_DISK_SIZE_GB }} nodeAdminUsername=${{ secrets.ADMIN_USERNAME }} sshRSAPublicKey="${{ secrets.SSH_KEY }}" subnetResourceId=${{ env.APP_SUBNET_ID }} networkPlugin=${{ env.AKS_NET_PLUGIN }} serviceCidr=${{ env.AKS_SERVICE_CIDR }} dnsServiceIp=${{ env.AKS_DNS_SERVICE_IP }} podCidr=${{ env.AKS_POD_CIDR }} dockerBridgeCidr=${{ env.AKS_DOCKER_BRIDGE_ADDRESS }} podIdentityEnabled=${{ env.AKS_POD_IDENTITY_ENABLED }} podIdentityKubenetEnabled=${{ env.AKS_POD_IDENTITY_KUBENET_ENABLED }} podIdentityNamespace=${{ env.AKS_POD_IDENTITY_NAMESPACE }} podIdentityBindingSelector=${{ env.AKS_POD_IDENTITY_BINDING_SELECTOR }}

      - name: Get AKS NSG Info
        if: success()
        run: |
          AKS_NSG_NAME=$(az network nsg list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }} -o tsv --query '[0].name')
          echo "AKS_NSG_NAME=$AKS_NSG_NAME" >> $GITHUB_ENV
          echo "AKS_NSG_ID=$(az network nsg show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }} -n $AKS_NSG_NAME -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Deploy NSG Flow Logs for AKS NSG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
          deploymentName: ${{ env.APIM_NSG_NAME }}-flow
          template: ./src/infra-deploy/templates/net.nsg.flow-log.json
          parameters: location=${{ matrix.region }} flowLogName="${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}""-""${{ env.AKS_NSG_NAME }}""-flow" nsgResourceId="${{ env.AKS_NSG_ID }}" storageAccountResourceId="${{ env.STORAGE_ACCOUNT_ID }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"  


      - name: Deploy AKS Cluster Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AKS_CLUSTER_NAME }}-diag
          template: ./src/infra-deploy/templates/aks.cluster.diagnostics.json
          parameters: clusterName=${{ env.AKS_CLUSTER_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get AKS Cluster Resource ID
        if: success()
        run: echo "AKS_CLUSTER_ID=$(az aks show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      # Contributor on AKS Nodes RG is automatically granted by cluster create. Adding a couple more explicitly here due to AAD pod identity reqs.
      - name: Grant UAMI Managed Identity Operator on AKS Nodes RG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}-mio
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_MANAGED_ID_OPERATOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      - name: Grant UAMI Virtual Machine Contributor on AKS Nodes RG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}-vm-contrib
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_VM_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}


      - name: Deploy AKS User Node Pool
        if: ${{ success() && (env.AKS_USER_POOL_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AKS_CLUSTER_NAME }}-${{ env.AKS_USER_POOL_NAME }}
          template: ./src/infra-deploy/templates/aks.node-pool.json
          parameters: location=${{ matrix.region }} clusterName=${{ env.AKS_CLUSTER_NAME }} availabilityZones=${{ env.AVL_ZONES }} nodePoolMode=User nodePoolName=${{ env.AKS_USER_POOL_NAME }} nodeCount=${{ env.AKS_USER_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_USER_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_USER_POOL_NODE_SIZE }} osDiskSizeGB=${{ env.AKS_USER_POOL_NODE_DISK_SIZE_GB }} subnetResourceId=${{ env.APP_SUBNET_ID }} nodeLabels="${{ env.AKS_USER_POOL_NODE_LABELS }}"

      - name: Deploy AKS Add-ons - Monitoring
        if: success()
        run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a monitoring --workspace-resource-id ${{ env.LA_WORKSPACE_ID }}

      - name: Deploy AKS Add-ons - AGIC
        if: success()
        run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a ingress-appgw --appgw-id ${{ env.APPGW_ID }}

      - name: Deploy Pod Identity
        if: success()
        run: az aks pod-identity add -g ${{ env.AZURE_RESOURCE_GROUP }} --cluster-name ${{ env.AKS_CLUSTER_NAME }} --namespace ${{ env.AKS_POD_IDENTITY_NAMESPACE }} --name ${{ env.UAMI_NAME }} --binding-selector ${{ env.AKS_POD_IDENTITY_BINDING_SELECTOR }} --identity-resource-id ${{ env.UAMI_ID }}


      - name: Deploy Public IP for APIM Service
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}
          template: ./src/infra-deploy/templates/net.public-ip.json
          parameters: location=${{ matrix.region }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} availabilityZones=${{ env.AVL_ZONES }} publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APIM_PUBLIC_IP_NAME }}

      - name: Deploy Public IP for APIM Service Diagnostics
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}-diag
          template: ./src/infra-deploy/templates/net.public-ip.diagnostics.json
          parameters: publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy APIM Service
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}
          template: ./src/infra-deploy/templates/apim.service.json
          parameters: location=${{ matrix.region }} apimServiceName=${{ env.APIM_SERVICE_NAME }} skuName=${{ env.APIM_SKU_NAME }} availabilityZones=${{ env.AVL_ZONES }} scaleUnits=${{ env.APIM_SCALE_UNITS }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} publicIpResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} virtualNetworkType=${{ env.APIM_VNET_TYPE }} subnetResourceId=${{ env.APIM_SUBNET_ID }}

      - name: Deploy APIM Service Diagnostics
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-diag
          template: ./src/infra-deploy/templates/apim.service.diagnostics.json
          parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy APIM Logger
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-logger
          template: ./src/infra-deploy/templates/apim.logger.json
          parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} loggerName=${{ env.APP_INSIGHTS_NAME }} logTargetResourceId=${{ env.APP_INSIGHTS_ID }} appInsightsTargetInstrumentationKey=${{ env.APP_INSIGHTS_INSTRUMENTATION_KEY }}

      - name: Get APIM Info
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        run: |
          echo "APIM_SERVICE_ID=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APIM_SERVICE_HOSTNAME=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'hostnameConfigurations[0].hostName')" >> $GITHUB_ENV

      - name: Import API from Swagger
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        run: |
          az apim api import --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n "${{ env.APIM_SERVICE_NAME }}" --verbose \
            --api-id "${{ env.APIM_API_ID }}" --display-name "${{ env.APIM_API_DISPLAY_NAME }}" --description "${{ env.APIM_API_DESCRIPTION }}" \
            --api-revision "${{ env.APIM_API_VERSION }}" --service-url "http://${{ env.APPGW_FQDN }}" --path "${{ env.APIM_API_SERVICE_PATH }}" \
            --subscription-required false --protocols http https \
            --specification-format "OpenApiJson" --specification-path "./src/workload/alwayson/ao.fe/swagger.json"


      - name: Deploy App Insights Availability Test for APIM
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-avl-test
          template: ./src/infra-deploy/templates/monitor.app-insights.web-test.json
          parameters: location=${{ matrix.region }} appInsightsName=${{ env.APP_INSIGHTS_NAME }} webTestName="apim-${{ env.APIM_SERVICE_NAME }}" testUrl="https://${{ env.APIM_SERVICE_HOSTNAME }}"


      - name: Azure logout
        run: |
          az logout


  global-config:
    runs-on: ubuntu-latest
    needs: deploy-region
    strategy:
      matrix:
        region: [eastus2,westus2]
      max-parallel: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          UAMI_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          REGISTRY_NAME=${PREFIX//-/}${{ env.SUFFIX }}
          APIM_SERVICE_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}
          FRONT_DOOR_NAME=${{ env.PREFIX }}
          FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_NAME

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "UAMI_NAME=$UAMI_NAME" >> $GITHUB_ENV
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV
          echo "APIM_SERVICE_NAME=$APIM_SERVICE_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_NAME=$FRONT_DOOR_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_ENDPOINT_NAME" >> $GITHUB_ENV

          echo "UAMI_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP -n $UAMI_NAME -o tsv --query 'id')" >> $GITHUB_ENV
          echo "UAMI_PRINCIPAL_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP -n $UAMI_NAME -o tsv --query 'principalId')" >> $GITHUB_ENV
          echo "UAMI_CLIENT_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP -n $UAMI_NAME -o tsv --query 'clientId')" >> $GITHUB_ENV
          echo "APIM_SERVICE_HOSTNAME=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP -n $APIM_SERVICE_NAME -o tsv --query 'hostnameConfigurations[0].hostName')" >> $GITHUB_ENV
          echo "FRONT_DOOR_ORIGIN_GROUP_ID=$(az afd origin-group show --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} -g ${{env.AZURE_RESOURCE_GROUP_GLOBAL}} --profile-name $FRONT_DOOR_NAME --origin-group-name ${{env.FRONT_DOOR_ORIGIN_GROUP_NAME}} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Grant UAMI ACRPull on Global Registry
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}-rbac-acr-pull
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_ACR_PULL }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.ContainerRegistry/registries" resourceName=${{ env.REGISTRY_NAME }}

      - name: Deploy Front Door Origin
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
          deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}-${{ matrix.region }}
          template: ./src/infra-deploy/templates/fd.origin.json
          parameters: frontDoorName="${{ env.FRONT_DOOR_NAME }}" originGroupName="${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}" originName=${{ matrix.region }} hostName=${{ env.APIM_SERVICE_HOSTNAME }}

      - name: Deploy Front Door Route
        if: ${{ success() && (env.APIM_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
          deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ENDPOINT_NAME }}-${{ env.FRONT_DOOR_ROUTE_NAME }}-${{ matrix.region }}
          template: ./src/infra-deploy/templates/fd.route.json
          parameters: frontDoorName="${{env.FRONT_DOOR_NAME}}" endpointName="${{env.FRONT_DOOR_ENDPOINT_NAME}}" routeName="${{ env.FRONT_DOOR_ROUTE_NAME }}" originGroupId="${{ env.FRONT_DOOR_ORIGIN_GROUP_ID }}"

      - name: Azure logout
        run: |
          az logout
