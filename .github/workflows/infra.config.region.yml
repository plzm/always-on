name: Infra-ConfigRegion

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '22'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'

  COSMOS_DB_DATABASE_NAME: 'ao'
  COSMOS_DB_CONTAINER_1_NAME: 'profiles'
  COSMOS_DB_CONTAINER_2_NAME: 'progress'

  EVENT_HUB_AUTH_RULE_NAME: 'SendListen'

  SECRET_NAME_COSMOS_DB_CONN_STRING: 'CosmosDbConnectionString'
  SECRET_NAME_COSMOS_DB_DATABASE_NAME: 'CosmosDbDatabaseName'
  SECRET_NAME_COSMOS_DB_CONTAINER_1_NAME: 'CosmosDbProfileContainerName'
  SECRET_NAME_COSMOS_DB_CONTAINER_2_NAME: 'CosmosDbProgressContainerName'
  SECRET_NAME_EVENT_HUB_NS_CONN_STRING: 'EventHubConnectionString'

jobs:
  deploy-region:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          COSMOS_DB_ACCT_NAME=${{ env.PREFIX }}
          KEY_VAULT_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}
          EVENT_HUB_NS_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "COSMOS_DB_ACCT_NAME=$COSMOS_DB_ACCT_NAME" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$KEY_VAULT_NAME" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_NAME=$EVENT_HUB_NS_NAME" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV

          echo "COSMOS_DB_CONN_STRING=$(az cosmosdb keys list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n $COSMOS_DB_ACCT_NAME --type connection-strings -o tsv --query 'connectionStrings[0].connectionString')" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_CONN_STRING=$(az eventhubs namespace authorization-rule keys list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP --namespace-name $EVENT_HUB_NS_NAME -n ${{ env.EVENT_HUB_AUTH_RULE_NAME }} -o tsv --query 'primaryConnectionString')" >> $GITHUB_ENV


      #- name: Write secrets to region Key Vault
      #  if: success()
      #  run: |
      #    az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONN_STRING }} --value "${{ env.COSMOS_DB_CONN_STRING }}"
      #    az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_DATABASE_NAME }} --value "${{ env.COSMOS_DB_DATABASE_NAME }}"
      #    az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONTAINER_1_NAME }} --value "${{ env.COSMOS_DB_CONTAINER_1_NAME }}"
      #    az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONTAINER_2_NAME }} --value "${{ env.COSMOS_DB_CONTAINER_2_NAME }}"
      #    az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_EVENT_HUB_NS_CONN_STRING }} --value "${{ env.EVENT_HUB_NS_CONN_STRING }}"



      #- name: Set AKS Context
      #  if: success()
      #  uses: azure/aks-set-context@v1
      #  with:
      #    creds: '${{ secrets.AZURE_CREDENTIALS }}'
      #    resource-group: '${{ env.AZURE_RESOURCE_GROUP }}'
      #    cluster-name: '${{ env.AKS_CLUSTER_NAME }}'

      #- name: Deploy RBAC Secrets Store Provider Class
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/rbac-secretproviderclass.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy CSI Driver
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/csidriver.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy Secrets Provider Classes
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/secrets-store.csi.x-k8s.io_secretproviderclasses.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy Secrets Provider Class Pod Statuses
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/secrets-store.csi.x-k8s.io_secretproviderclasspodstatuses.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy Secrets Store CSI Driver
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/secrets-store-csi-driver.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy Secrets Store K8S Secrets Syncing
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/rbac-secretprovidersyncing.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Deploy AKS Provider for Secrets Store CSI Driver
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: '.src/infra-deploy/aks/provider-azure-installer.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      - name: Write Tenant ID to SecretProviderClass YAML file
        if: success()
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: './src/infra-deploy/aks/secretprovider.ao.akv.yaml'
          propertyPath: 'spec.parameters.tenantId'
          value: '${{ secrets.AZURE_TENANT_ID }}'
          updateFile: 'true'
          commitChange: 'false'
          createPR: 'false'

      - name: Write AKV Name to SecretProviderClass YAML file
        if: success()
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: './src/infra-deploy/aks/secretprovider.ao.akv.yaml'
          propertyPath: 'spec.parameters.keyvaultName'
          value: '${{ env.KEY_VAULT_NAME }}'
          updateFile: 'true'
          commitChange: 'false'
          createPR: 'false'

      - name: Debug - show file contents
        if: success()
        run: cat ./src/infra-deploy/aks/secretprovider.ao.akv.yaml

      #- name: Deploy Customized SecretProviderClass
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: './src/infra-deploy/aks/secretprovider.ao.akv.yaml'
      #    kubectl-version: 'latest'
      #    force: true


      - name: Azure logout
        run: |
          az logout
