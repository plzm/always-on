name: Infra-ConfigRegion

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '28'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'

  COSMOS_DB_DATABASE_NAME: 'ao'
  COSMOS_DB_CONTAINER_1_NAME: 'profiles'
  COSMOS_DB_CONTAINER_2_NAME: 'progress'

  STORAGE_CONTAINER_NAME: 'ehproc'

  EVENT_HUB_EVENT_HUB_NAME: 'eh1'
  EVENT_HUB_CONSUMER_GROUP_NAME: 'ao'
  EVENT_HUB_AUTH_RULE_NAME: 'SendListen'

  SECRET_NAME_APPLICATIONINSIGHTS_CONNECTION_STRING: 'AppInsightsConnectionString'
  SECRET_NAME_COSMOS_DB_CONN_STRING: 'CosmosDbConnectionString'
  SECRET_NAME_COSMOS_DB_DATABASE_NAME: 'CosmosDbDatabaseName'
  SECRET_NAME_COSMOS_DB_CONTAINER_1_NAME: 'CosmosDbProfileContainerName'
  SECRET_NAME_COSMOS_DB_CONTAINER_2_NAME: 'CosmosDbProgressContainerName'
  SECRET_NAME_STORAGE_ACCOUNT_CONN_STRING: 'StorageAccountConnString'
  SECRET_NAME_STORAGE_ACCOUNT_NAME: 'StorageAccountName'
  SECRET_NAME_STORAGE_CONTAINER_NAME: 'StorageContainerName'
  SECRET_NAME_EVENT_HUB_NS_CONN_STRING: 'EventHubConnectionString'
  SECRET_NAME_EVENT_HUB_EVENT_HUB_NAME: 'EventHubName'
  SECRET_NAME_EVENT_HUB_CONSUMER_GROUP_NAME: 'EventHubConsumerGroup'

  AKS_PATH_ROOT: './src/infra-deploy/aks/'

jobs:
  config-region:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI Extensions
        if: success()
        run: |
          az extension add --name application-insights

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}

          APP_INSIGHTS_NAME=${{ env.PREFIX }}

          COSMOS_DB_ACCT_NAME=${{ env.PREFIX }}

          STORAGE_ACCOUNT_NAME=${PREFIX//-/}${{ matrix.region }}

          EVENT_HUB_NS_NAME=${{ env.PREFIX }}-${{ matrix.region }}

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV

          echo "COSMOS_DB_ACCT_NAME=$COSMOS_DB_ACCT_NAME" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_NAME=$EVENT_HUB_NS_NAME" >> $GITHUB_ENV

          echo "KEY_VAULT_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}" >> $GITHUB_ENV
          echo "AKS_AKV_PROVIDER_CUSTOM_FILE=${{ env.AKS_PATH_ROOT }}secretprovider.ao.akv.yaml" >> $GITHUB_ENV

          echo "APPLICATIONINSIGHTS_CONNECTION_STRING=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app $APP_INSIGHTS_NAME -o tsv --query 'connectionString')" >> $GITHUB_ENV

          echo "COSMOS_DB_CONN_STRING=$(az cosmosdb keys list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n $COSMOS_DB_ACCT_NAME --type connection-strings -o tsv --query 'connectionStrings[0].connectionString')" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_CONN_STRING=$(az storage account show-connection-string --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP -n $STORAGE_ACCOUNT_NAME -o tsv --query 'connectionString')" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_CONN_STRING=$(az eventhubs namespace authorization-rule keys list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g $AZURE_RESOURCE_GROUP --namespace-name $EVENT_HUB_NS_NAME -n ${{ env.EVENT_HUB_AUTH_RULE_NAME }} -o tsv --query 'primaryConnectionString')" >> $GITHUB_ENV


      - name: Write Tenant ID to SecretProviderClass YAML file
        if: success()
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: '${{ env.AKS_AKV_PROVIDER_CUSTOM_FILE }}'
          propertyPath: 'spec.parameters.tenantId'
          value: '${{ secrets.AZURE_TENANT_ID }}'
          updateFile: 'true'
          commitChange: 'false'
          createPR: 'false'

      - name: Write AKV Name to SecretProviderClass YAML file
        if: success()
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: '${{ env.AKS_AKV_PROVIDER_CUSTOM_FILE }}'
          propertyPath: 'spec.parameters.keyvaultName'
          value: '${{ env.KEY_VAULT_NAME }}'
          updateFile: 'true'
          commitChange: 'false'
          createPR: 'false'

      - name: Debug SecretProviderClass YAML file
        if: success()
        run: |
          cat ${{ env.AKS_AKV_PROVIDER_CUSTOM_FILE }}


      - name: Write secrets to region Key Vault
        if: success()
        run: |
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_APPLICATIONINSIGHTS_CONNECTION_STRING }} --value "${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}"

          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONN_STRING }} --value "${{ env.COSMOS_DB_CONN_STRING }}"

          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONN_STRING }} --value "${{ env.COSMOS_DB_CONN_STRING }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_DATABASE_NAME }} --value "${{ env.COSMOS_DB_DATABASE_NAME }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONTAINER_1_NAME }} --value "${{ env.COSMOS_DB_CONTAINER_1_NAME }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_COSMOS_DB_CONTAINER_2_NAME }} --value "${{ env.COSMOS_DB_CONTAINER_2_NAME }}"

          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_STORAGE_ACCOUNT_CONN_STRING }} --value "${{ env.STORAGE_ACCOUNT_CONN_STRING }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_STORAGE_ACCOUNT_NAME }} --value "${{ env.STORAGE_ACCOUNT_NAME }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_STORAGE_CONTAINER_NAME }} --value "${{ env.STORAGE_CONTAINER_NAME }}"

          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_EVENT_HUB_NS_CONN_STRING }} --value "${{ env.EVENT_HUB_NS_CONN_STRING }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_EVENT_HUB_EVENT_HUB_NAME }} --value "${{ env.EVENT_HUB_EVENT_HUB_NAME }}"
          az keyvault secret set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --vault-name ${{ env.KEY_VAULT_NAME }} --name ${{ env.SECRET_NAME_EVENT_HUB_CONSUMER_GROUP_NAME }} --value "${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}"


      - name: Set AKS Context
        if: success()
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          resource-group: '${{ env.AZURE_RESOURCE_GROUP }}'
          cluster-name: '${{ env.AKS_CLUSTER_NAME }}'

      - name: Deploy RBAC Secrets Store Provider Class
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}rbac-secretproviderclass.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system

      - name: Deploy CSI Driver
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}csidriver.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system

      - name: Deploy Secrets Provider Classes
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}secrets-store.csi.x-k8s.io_secretproviderclasses.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system

      - name: Deploy Secrets Provider Class Pod Statuses
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}secrets-store.csi.x-k8s.io_secretproviderclasspodstatuses.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system

      - name: Deploy Secrets Store CSI Driver
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}secrets-store-csi-driver.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system

      - name: Deploy Secrets Store K8S Secrets Syncing
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}rbac-secretprovidersyncing.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: kube-system


      - name: Deploy AKS Provider for Secrets Store CSI Driver
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_PATH_ROOT }}provider-azure-installer.yaml'
          kubectl-version: 'latest'
          force: true
          namespace: default


      - name: Deploy Customized SecretProviderClass
        if: success()
        uses: Azure/k8s-deploy@v1.4
        with:
          manifests: '${{ env.AKS_AKV_PROVIDER_CUSTOM_FILE }}'
          kubectl-version: 'latest'
          force: true
          namespace: default

      - name: Restart Daemonset csi-secrets-store-provider-azure in case updated list of AKV secrets
        if: success()
        run: |
          kubectl -n default rollout restart daemonset/csi-secrets-store-provider-azure

      - name: Azure logout
        run: |
          az logout
