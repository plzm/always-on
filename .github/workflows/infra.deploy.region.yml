name: Infra-DeployRegion

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '22'

  RBAC_ROLE_ID_CONTRIBUTOR: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
  RBAC_ROLE_ID_READER: 'acdd72a7-3385-48ef-bd42-f606fba81ae7'
  RBAC_ROLE_ID_MANAGED_ID_OPERATOR: 'f1a07417-d97a-45cb-824c-7a7467783830'
  RBAC_ROLE_ID_NETWORK_CONTRIBUTOR: '4d97b98b-1d4f-4787-a291-c67834d212e7'
  RBAC_ROLE_ID_VM_CONTRIBUTOR: '9980e02c-c2be-4d73-94e8-173b1dc7cf3c'
  RBAC_ROLE_ID_ACR_PULL: '7f951dda-4ed3-4680-a7ca-43fe172d538d'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'

  NSG_IN_SRC: '75.68.47.183/32'

  AVL_ZONES: '1,2,3'

  IDENTITY_TYPE: 'UserAssigned'

  VNET_PREFIX: '10.0.0.0/16'
  VNET_ENABLE_DDOS: 'false'
  APIM_SUBNET_NAME: 'apim'
  APIM_SUBNET_PREFIX: '10.0.1.0/24'
  APIM_SUBNET_FRONTDOOR_INBOUND_ONLY: 'true'
  APPGW_SUBNET_NAME: 'appgw'
  APPGW_SUBNET_PREFIX: '10.0.2.0/24'
  APP_SUBNET_NAME: 'app'
  APP_SUBNET_PREFIX: '10.0.5.0/24'
  APP_SUBNET_SERVICE_ENDPOINTS: 'Microsoft.AzureCosmosDB,Microsoft.EventHub,Microsoft.KeyVault'

  EVENT_HUB_CAPACITY: '1'
  EVENT_HUB_EVENT_HUB_NAME: 'eh1'
  EVENT_HUB_CONSUMER_GROUP_NAME: 'ao'
  EVENT_HUB_AUTH_RULE_NAME: 'SendListen'
  EVENT_HUB_AUTH_RULE_RIGHTS: 'Send,Listen'

  AKS_ZONES_FOR_CLI: '1 2 3'
  AKS_VERSION: '1.20.5'
  AKS_NET_PLUGIN: 'kubenet'
  AKS_SERVICE_CIDR: '10.1.0.0/16'
  AKS_DNS_SERVICE_IP: '10.1.0.10'
  AKS_POD_CIDR: '10.241.0.0/16'
  AKS_DOCKER_BRIDGE_ADDRESS: '172.17.0.1/16'

  AKS_POD_IDENTITY_ENABLED: 'true'
  AKS_POD_IDENTITY_KUBENET_ENABLED: 'true'
  AKS_POD_IDENTITY_NAMESPACE: 'default'

  AKS_SYSTEM_POOL_NODE_COUNT: '1'
  AKS_SYSTEM_POOL_AUTOSCALE: 'true'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN: '1'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX: '10'
  AKS_SYSTEM_POOL_NODE_SIZE: 'Standard_DS2_v2'
  AKS_SYSTEM_POOL_NODE_DISK_SIZE_GB: '60'

  AKS_USER_POOL_DEPLOY: 'false'
  AKS_USER_POOL_NODE_NAME: 'aopool'
  AKS_USER_POOL_NODE_COUNT: '0'
  AKS_USER_POOL_AUTOSCALE: 'true'
  AKS_USER_POOL_AUTOSCALE_COUNT_MIN: '0'
  AKS_USER_POOL_AUTOSCALE_COUNT_MAX: '10'
  AKS_USER_POOL_NODE_SIZE: 'Standard_DS2_v2'
  AKS_USER_POOL_NODE_DISK_SIZE_GB: '60'

  APPGW_SKU_NAME: 'Standard_v2'

  APIM_SKU_NAME: 'Developer'
  #APIM_SKU_NAME: 'Premium'
  APIM_VNET_TYPE: 'External'
  APIM_SCALE_UNITS: 3
  APIM_API_VERSION_SET_NAME: 'conference_api_vs'
  APIM_API_VERSION_SET_DESCRIPTION: 'Conference API Description'
  APIM_API_NAME: 'demo-conference-api'
  APIM_API_DESCRIPTION: 'Foo'
  APIM_API_SERVICE_URL: 'https://conferenceapi.azurewebsites.net'
  APIM_API_SERVICE_PATH: 'conference'

  FRONT_DOOR_ORIGIN_GROUP_NAME: 'apims'
  FRONT_DOOR_ROUTE_NAME: 'api'

jobs:
  deploy-region:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI Extensions
        run: |
          az extension add --name application-insights
          az extension add --name aks-preview
          az extension add --name front-door

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          UAMI_NAME=${{ env.PREFIX }}
          APP_NSG_NAME=app-${{ matrix.region }}
          APIM_NSG_NAME=apim-${{ matrix.region }}
          DDOS_PLAN_NAME=${{ env.PREFIX }}
          VNET_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          KEY_VAULT_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}
          LA_WORKSPACE_NAME=${{ env.PREFIX }}
          APP_INSIGHTS_NAME=${{ env.PREFIX }}
          REGISTRY_NAME=${PREFIX//-/}${{ env.SUFFIX }}
          EVENT_HUB_NS_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          APPGW_PUBLIC_IP_NAME=${{ env.PREFIX }}-appgw-${{ matrix.region }}
          APPGW_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}
          AKS_DNS_PREFIX=${AKS_CLUSTER_NAME//-/}
          AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP-$AKS_CLUSTER_NAME
          AKS_POD_IDENTITY_BINDING_SELECTOR=$UAMI_NAME-binding
          APIM_PUBLIC_IP_NAME=${{ env.PREFIX }}-apim-${{ matrix.region }}
          APIM_SERVICE_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}
          FRONT_DOOR_NAME=${{ env.PREFIX }}
          FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_NAME


          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "UAMI_NAME=$UAMI_NAME" >> $GITHUB_ENV
          echo "APP_NSG_NAME=$APP_NSG_NAME" >> $GITHUB_ENV
          echo "APIM_NSG_NAME=$APIM_NSG_NAME" >> $GITHUB_ENV
          echo "DDOS_PLAN_NAME=$DDOS_PLAN_NAME" >> $GITHUB_ENV
          echo "VNET_NAME=$VNET_NAME" >> $GITHUB_ENV
          echo "KEY_VAULT_NAME=$KEY_VAULT_NAME" >> $GITHUB_ENV
          echo "LA_WORKSPACE_NAME=$LA_WORKSPACE_NAME" >> $GITHUB_ENV
          echo "APP_INSIGHTS_NAME=$APP_INSIGHTS_NAME" >> $GITHUB_ENV
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV
          echo "EVENT_HUB_NS_NAME=$EVENT_HUB_NS_NAME" >> $GITHUB_ENV
          echo "APPGW_PUBLIC_IP_NAME=$APPGW_PUBLIC_IP_NAME" >> $GITHUB_ENV
          echo "APPGW_NAME=$APPGW_NAME" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_DNS_PREFIX=$AKS_DNS_PREFIX" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP_AKS_NODES" >> $GITHUB_ENV
          echo "AKS_POD_IDENTITY_BINDING_SELECTOR=$AKS_POD_IDENTITY_BINDING_SELECTOR" >> $GITHUB_ENV
          echo "APIM_PUBLIC_IP_NAME=$APIM_PUBLIC_IP_NAME" >> $GITHUB_ENV
          echo "APIM_SERVICE_NAME=$APIM_SERVICE_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_NAME=$FRONT_DOOR_NAME" >> $GITHUB_ENV
          echo "FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_ENDPOINT_NAME" >> $GITHUB_ENV


          echo "AZURE_CRED_SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.SP_CLIENT_ID }} -o tsv --query 'objectId')" >> $GITHUB_ENV
          echo "LA_WORKSPACE_ID=$(az monitor log-analytics workspace show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n $LA_WORKSPACE_NAME -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_INSIGHTS_ID=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app $APP_INSIGHTS_NAME -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_INSIGHTS_INSTRUMENTATION_KEY=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app $APP_INSIGHTS_NAME -o tsv --query 'instrumentationKey')" >> $GITHUB_ENV
          echo "FRONT_DOOR_ORIGIN_GROUP_ID=$(az afd origin-group show --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} -g ${{env.AZURE_RESOURCE_GROUP_GLOBAL}} --profile-name $FRONT_DOOR_NAME --origin-group-name ${{env.FRONT_DOOR_ORIGIN_GROUP_NAME}} -o tsv --query 'id')" >> $GITHUB_ENV


      #- name: Create Azure resource group
      #  if: success()
      #  run: |
      #    az group create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location ${{ matrix.region }} --name ${{ env.AZURE_RESOURCE_GROUP }}


      ##- name: Deploy User-Assigned MI
      ##  if: success()
      ##  uses: azure/arm-deploy@v1
      ##  with:
      ##    resourceGroupName: ${{env.AZURE_RESOURCE_GROUP}}
      ##    template: ./src/infra-deploy/templates/identity.user-assigned-mi.json
      ##    parameters: location=${{ matrix.region }} tenantId=${{secrets.AZURE_TENANT_ID}} identityName=${{env.UAMI_NAME}}


      #- name: Deploy NSG for APIM Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_NSG_NAME }}
      #    template: ./src/infra-deploy/templates/apim.nsg.json
      #    parameters: location=${{ matrix.region }} nsgName=${{ env.APIM_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} allowTrafficOnlyFromFrontDoor=${{ env.APIM_SUBNET_FRONTDOOR_INBOUND_ONLY }}

      #- name: Deploy NSG for APIM Subnet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_NSG_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.nsg.diagnostics.json
      #    parameters: nsgName=${{ env.APIM_NSG_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Deploy NSG for App Subnet without AppGW source address
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APP_NSG_NAME }}
      #    template: ./src/infra-deploy/templates/net.nsg.json
      #    parameters: location=${{ matrix.region }} nsgName=${{ env.APP_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} 

      #- name: Deploy NSG for App Subnet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APP_NSG_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.nsg.diagnostics.json
      #    parameters: nsgName=${{ env.APP_NSG_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}


      #- name: Deploy VNet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.VNET_NAME }}
      #    template: ./src/infra-deploy/templates/net.vnet.json
      #    parameters: |
      #      location=${{ matrix.region }} vnetName=${{ env.VNET_NAME }} vnetPrefix=${{ env.VNET_PREFIX }} enableDdosProtection=${{ env.VNET_ENABLE_DDOS }} ddosProtectionPlanResourceGroup=${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} ddosProtectionPlanName=${{ env.DDOS_PLAN_NAME }}

      #- name: Deploy VNet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.VNET_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.vnet.diagnostics.json
      #    parameters: vnetName=${{ env.VNET_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Deploy APIM Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SUBNET_NAME }}
      #    template: ./src/infra-deploy/templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APIM_SUBNET_NAME }} subnetPrefix=${{ env.APIM_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APIM_NSG_NAME }}

      #- name: Deploy AppGW Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APPGW_SUBNET_NAME }}
      #    template: ./src/infra-deploy/templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APPGW_SUBNET_NAME }} subnetPrefix=${{ env.APPGW_SUBNET_PREFIX }}

      #- name: Deploy App Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APP_SUBNET_NAME }}
      #    template: ./src/infra-deploy/templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APP_SUBNET_NAME }} subnetPrefix=${{ env.APP_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APP_NSG_NAME }} serviceEndpoints=${{ env.APP_SUBNET_SERVICE_ENDPOINTS }}


      - name: Get Subnet Resource IDs
        if: success()
        run: |
          echo "APIM_SUBNET_ID=$(az network vnet subnet show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --vnet-name ${{ env.VNET_NAME }} -n ${{ env.APIM_SUBNET_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_SUBNET_ID=$(az network vnet subnet show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --vnet-name ${{ env.VNET_NAME }} -n ${{ env.APP_SUBNET_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      - name: Get UAMI Info
        if: success()
        run: |
          echo "UAMI_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "UAMI_PRINCIPAL_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'principalId')" >> $GITHUB_ENV
          echo "UAMI_CLIENT_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'clientId')" >> $GITHUB_ENV

      #- name: Grant UAMI Contributor on Region RG
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.AZURE_RESOURCE_GROUP }}-rbac-contrib
      #    template: ./src/infra-deploy/templates/authorization.role-assignment.json
      #    parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      ###- name: Grant UAMI ACR Pull on global Container Registry so regional AKS cluster can pull images
      ###  if: success()
      ###  uses: azure/arm-deploy@v1
      ###  with:
      ###    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
      ###    deploymentName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}-rbac-acr-pull
      ###    template: ./src/infra-deploy/templates/authorization.role-assignment.json
      ###    parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_ACR_PULL }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.ContainerRegistry/registries" resourceName=${{ env.REGISTRY_NAME }}

      ###- name: Grant UAMI Managed Identity Operator on Region RG for AKS AAD Pod Identity
      ###  if: success()
      ###  uses: azure/arm-deploy@v1
      ###  with:
      ###    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      ###    deploymentName: ${{ env.AZURE_RESOURCE_GROUP }}-rbac-mio
      ###    template: ./src/infra-deploy/templates/authorization.role-assignment.json
      ###    parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_MANAGED_ID_OPERATOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      ###- name: Grant UAMI Network Contributor on VNet for kubenet config
      ###  if: success()
      ###  uses: azure/arm-deploy@v1
      ###  with:
      ###    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      ###    deploymentName: ${{ env.VNET_NAME }}-rbac-net-contrib
      ###    template: ./src/infra-deploy/templates/authorization.role-assignment.json
      ###    parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_NETWORK_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }} resourceType="Microsoft.Network/virtualNetworks" resourceName=${{ env.VNET_NAME }}



      #- name: Deploy Key Vault
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.KEY_VAULT_NAME }}
      #    template: ./src/infra-deploy/templates/key-vault.json
      #    parameters: location=${{ matrix.region }} tenantId=${{ secrets.AZURE_TENANT_ID }} keyVaultName=${{ env.KEY_VAULT_NAME }}

      #- name: Deploy Key Vault Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.KEY_VAULT_NAME }}-diag
      #    template: ./src/infra-deploy/templates/key-vault.diagnostics.json
      #    parameters: keyVaultName=${{ env.KEY_VAULT_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Grant Key Vault access permissions to current authentication context to get/set/list certs, secrets and keys
      #  if: success()
      #  run: |
      #    az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
      #      -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
      #      --object-id ${{ env.AZURE_CRED_SP_OBJECT_ID }} \
      #      --key-permissions backup create decrypt delete encrypt get import list purge recover restore sign unwrapKey update verify wrapKey \
      #      --secret-permissions backup delete get list purge recover restore set \
      #      --certificate-permissions backup create delete deleteissuers get getissuers import list listissuers managecontacts manageissuers purge recover restore setissuers update

      #- name: Grant Key Vault access permissions to UAMI to get certs, secrets and keys
      #  if: success()
      #  run: |
      #    az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
      #      -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
      #      --object-id ${{ env.UAMI_PRINCIPAL_ID }} \
      #      --key-permissions get \
      #      --secret-permissions get \
      #      --certificate-permissions get


      #- name: Deploy Event Hub Namespace
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}
      #    template: ./src/infra-deploy/templates/event-hub.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} capacity=${{ env.EVENT_HUB_CAPACITY }}

      #- name: Deploy Event Hub Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-diag
      #    template: ./src/infra-deploy/templates/event-hub.diagnostics.json
      #    parameters: namespaceName=${{ env.EVENT_HUB_NS_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Deploy Event Hub Namespace Auth Rule
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-rule-send
      #    template: ./src/infra-deploy/templates/event-hub.ns-auth-rule.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} rights="${{ env.EVENT_HUB_AUTH_RULE_RIGHTS }}" ruleName="${{ env.EVENT_HUB_AUTH_RULE_NAME }}"

      #- name: Deploy Event Hub
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-${{ env.EVENT_HUB_EVENT_HUB_NAME }}
      #    template: ./src/infra-deploy/templates/event-hub.event-hub.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }}

      #- name: Deploy Event Hub Consumer Group
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}
      #    template: ./src/infra-deploy/templates/event-hub.consumer-group.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }} consumerGroupName=${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}

      #- name: Deploy Event Hub Network Rule Set
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-net-ruleset
      #    template: ./src/infra-deploy/templates/event-hub.network-rule-set.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }}

      #- name: Deploy Event Hub VNet Rule
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.EVENT_HUB_NS_NAME }}-vnet-rule
      #    template: ./src/infra-deploy/templates/event-hub.vnet-rule.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }}


      #- name: Deploy Public IP for App GW
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APPGW_PUBLIC_IP_NAME }}
      #    template: ./src/infra-deploy/templates/net.public-ip.json
      #    parameters: location=${{ matrix.region }} publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }} availabilityZones=${{ env.AVL_ZONES }} publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APPGW_PUBLIC_IP_NAME }}

      #- name: Deploy Public IP for App GW Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APPGW_PUBLIC_IP_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.public-ip.diagnostics.json
      #    parameters: publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get App GW Public IP
        if: success()
        run: |
          echo "APPGW_PUBLIC_IP_ADDRESS=$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'ipAddress')" >> $GITHUB_ENV

      #- name: Re-Deploy NSG for App Subnet with App GW Public IP
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APP_NSG_NAME }}
      #    template: ./src/infra-deploy/templates/aks.nsg.json
      #    parameters: location=${{ matrix.region }} nsgName=${{ env.APP_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} ingressRuleInbound110Src=${{ env.APPGW_PUBLIC_IP_ADDRESS }}


      #- name: Deploy App GW
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APPGW_NAME }}
      #    template: ./src/infra-deploy/templates/net.app-gw.json
      #    parameters: location=${{ matrix.region }} appGatewayName=${{ env.APPGW_NAME }} skuName=${{ env.APPGW_SKU_NAME }} availabilityZones=${{ env.AVL_ZONES }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} vnetResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APPGW_SUBNET_NAME }} publicIpResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} publicIpName=${{ env.APPGW_PUBLIC_IP_NAME }}

      #- name: Deploy App GW Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APPGW_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.app-gw.diagnostics.json
      #    parameters: appGatewayName=${{ env.APPGW_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get App GW Resource ID
        if: success()
        run: echo "APPGW_ID=$(az network application-gateway show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      ## Deploy AKS - ARM Template - but does not support kubelet identity
      #- name: Deploy AKS Cluster (ARM)
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.AKS_CLUSTER_NAME }}
      #    template: ./src/infra-deploy/templates/aks.cluster.json
      #    parameters: location=${{ matrix.region }} k8sversion=${{ env.AKS_VERSION }} clusterName=${{ env.AKS_CLUSTER_NAME }} dnsPrefix=${{ env.AKS_DNS_PREFIX }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} availabilityZones=${{ env.AVL_ZONES }} nodeResourceGroup=${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }} nodeCount=${{ env.AKS_SYSTEM_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_SYSTEM_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_SYSTEM_POOL_NODE_SIZE }} osDiskSizeGB=${{ env.AKS_SYSTEM_POOL_NODE_DISK_SIZE_GB }} nodeAdminUsername=${{ secrets.ADMIN_USERNAME }} sshRSAPublicKey=${{ secrets.SSH_KEY }} subnetResourceId=${{ env.APP_SUBNET_ID }} networkPlugin=${{ env.AKS_NET_PLUGIN }} serviceCidr=${{ env.AKS_SERVICE_CIDR }} dnsServiceIp=${{ env.AKS_DNS_SERVICE_IP }} podCidr=${{ env.AKS_POD_CIDR }} dockerBridgeCidr=${{ env.AKS_DOCKER_BRIDGE_ADDRESS }} podIdentityEnabled=${{ env.AKS_POD_IDENTITY_ENABLED }} podIdentityKubenetEnabled=${{ env.AKS_POD_IDENTITY_KUBENET_ENABLED }} podIdentityNamespace=${{ env.AKS_POD_IDENTITY_NAMESPACE }} podIdentityBindingSelector=${{ env.AKS_POD_IDENTITY_BINDING_SELECTOR }} podIdentityResourceId=${{ env.UAMI_ID }} podIdentityClientId=${{ env.UAMI_CLIENT_ID }} podIdentityObjectId=${{ env.UAMI_PRINCIPAL_ID }}

      # Deploy AKS - az cli since that is current support for kubelet identity - replace this with ARM template when that supports kubelet identity
      - name: Deploy AKS Cluster (CLI)
        if: success()
        run: |
          az aks create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -l ${{ matrix.region }} --verbose \
            -n ${{ env.AKS_CLUSTER_NAME }} --zones ${{ env.AKS_ZONES_FOR_CLI }} --kubernetes-version ${{ env.AKS_VERSION }} --dns-name-prefix ${{ env.AKS_DNS_PREFIX }} \
            --enable-managed-identity --assign-identity "${{ env.UAMI_ID }}" --assign-kubelet-identity "${{ env.UAMI_ID }}" --service-principal msi --client-secret null \
            --node-resource-group "${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}" --node-vm-size "${{ env.AKS_SYSTEM_POOL_NODE_SIZE }}" \
            --admin-username ${{ secrets.ADMIN_USERNAME }} --ssh-key-value "${{ secrets.SSH_KEY }}" \
            --vnet-subnet-id "${{ env.APP_SUBNET_ID }}" \
            --network-plugin ${{ env.AKS_NET_PLUGIN }} --service-cidr "${{ env.AKS_SERVICE_CIDR }}" --dns-service-ip "${{ env.AKS_DNS_SERVICE_IP }}" --pod-cidr "${{ env.AKS_POD_CIDR }}" --docker-bridge-address "${{ env.AKS_DOCKER_BRIDGE_ADDRESS }}" \
            --enable-cluster-autoscaler --min-count=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN }} --max-count ${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX }} \
            --skip-subnet-role-assignment

      - name: Deploy AKS Cluster Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AKS_CLUSTER_NAME }}-diag
          template: ./src/infra-deploy/templates/aks.cluster.diagnostics.json
          parameters: clusterName=${{ env.AKS_CLUSTER_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Get AKS Cluster Resource ID
        if: success()
        run: echo "AKS_CLUSTER_ID=$(az aks show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      # Contributor on AKS Nodes RG is automatically granted by cluster create. Adding a couple more explicitly here due to AAD pod identity reqs.
      - name: Grant UAMI Managed Identity Operator on AKS Nodes RG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}-mio
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_MANAGED_ID_OPERATOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}

      - name: Grant UAMI Virtual Machine Contributor on AKS Nodes RG
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
          deploymentName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}-vm-contrib
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_ID_VM_CONTRIBUTOR }} principalId=${{ env.UAMI_PRINCIPAL_ID }}


      - name: Deploy AKS User Node Pool
        if: ${{ success() && (env.AKS_USER_POOL_DEPLOY == 'true') }}
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.AKS_CLUSTER_NAME }}-${{ env.AKS_USER_POOL_NODE_NAME }}
          template: ./src/infra-deploy/templates/aks.node-pool.json
          parameters: location=${{ matrix.region }} clusterName=${{ env.AKS_CLUSTER_NAME }} availabilityZones=${{ env.AVL_ZONES }} nodePoolMode=User nodePoolName=${{ env.AKS_USER_POOL_NODE_NAME }} nodeCount=${{ env.AKS_USER_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_USER_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_USER_POOL_NODE_SIZE }} osDiskSizeGB=${{ env.AKS_USER_POOL_NODE_DISK_SIZE_GB }} subnetResourceId=${{ env.APP_SUBNET_ID }}

      - name: Deploy AKS Add-ons - Monitoring
        if: success()
        run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a monitoring --workspace-resource-id ${{ env.LA_WORKSPACE_ID }}

      - name: Deploy AKS Add-ons - AGIC
        if: success()
        run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a ingress-appgw --appgw-id ${{ env.APPGW_ID }}

      - name: Enable Pod Identity
        if: success()
        run: az aks update --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} --enable-pod-identity --enable-pod-identity-with-kubenet

      - name: Deploy Pod Identity
        if: success()
        run: az aks pod-identity add -g ${{ env.AZURE_RESOURCE_GROUP }} --cluster-name ${{ env.AKS_CLUSTER_NAME }} --namespace ${{ env.AKS_POD_IDENTITY_NAMESPACE }} --binding-selector ${{ env.AKS_POD_IDENTITY_BINDING_SELECTOR }} --name ${{ env.UAMI_NAME }} --identity-resource-id ${{ env.UAMI_ID }}


      #- name: Deploy Public IP for APIM Service
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}
      #    template: ./src/infra-deploy/templates/net.public-ip.json
      #    parameters: location=${{ matrix.region }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} availabilityZones=${{ env.AVL_ZONES }} publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APIM_PUBLIC_IP_NAME }}

      #- name: Deploy Public IP for APIM Service Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}-diag
      #    template: ./src/infra-deploy/templates/net.public-ip.diagnostics.json
      #    parameters: publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Deploy APIM Service
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SERVICE_NAME }}
      #    template: ./src/infra-deploy/templates/apim.service.json
      #    parameters: location=${{ matrix.region }} apimServiceName=${{ env.APIM_SERVICE_NAME }} skuName=${{ env.APIM_SKU_NAME }} availabilityZones=${{ env.AVL_ZONES }} scaleUnits=${{ env.APIM_SCALE_UNITS }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} publicIpResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} virtualNetworkType=${{ env.APIM_VNET_TYPE }} subnetResourceId=${{ env.APIM_SUBNET_ID }}

      #- name: Deploy APIM Service Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SERVICE_NAME }}-diag
      #    template: ./src/infra-deploy/templates/apim.service.diagnostics.json
      #    parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      #- name: Deploy APIM API Version Set
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SERVICE_NAME }}-version-set
      #    template: ./src/infra-deploy/templates/apim.api-version-set.json
      #    parameters: apimServiceName="${{ env.APIM_SERVICE_NAME }}" displayName="${{ env.APIM_API_VERSION_SET_NAME }}" description="${{ env.APIM_API_VERSION_SET_DESCRIPTION }}"

      #- name: Get APIM API Version Set Resource ID
      #  if: success()
      #  run: echo "APIM_API_VERSION_SET_ID=$(az apim api versionset list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --service-name "${{ env.APIM_SERVICE_NAME }}" -o tsv --query '[0].id')" >> $GITHUB_ENV

      #- name: Deploy APIM Logger
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SERVICE_NAME }}-logger
      #    template: ./src/infra-deploy/templates/apim.logger.json
      #    parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} loggerName=${{ env.APP_INSIGHTS_NAME }} logTargetResourceId=${{ env.APP_INSIGHTS_ID }} appInsightsTargetInstrumentationKey=${{ env.APP_INSIGHTS_INSTRUMENTATION_KEY }}

      #- name: Deploy APIM API (does NOT import API operations - TODO)
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    deploymentName: ${{ env.APIM_SERVICE_NAME }}-api
      #    template: ./src/infra-deploy/templates/apim.api.json
      #    parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} apiName=${{ env.APIM_API_NAME }} displayName=${{ env.APIM_API_NAME }} description="${{ env.APIM_API_DESCRIPTION }}" serviceUrl=${{ env.APIM_API_SERVICE_URL }} path=${{ env.APIM_API_SERVICE_PATH }} apiVersionSetResourceId=${{ env.APIM_API_VERSION_SET_ID }}

      #- name: Get APIM Info
      #  if: success()
      #  run: |
      #    echo "APIM_SERVICE_ID=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
      #    echo "APIM_SERVICE_HOSTNAME=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'hostnameConfigurations[0].hostName')" >> $GITHUB_ENV


      #- name: Deploy Front Door Origin
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
      #    deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}-${{ matrix.region }}
      #    template: ./src/infra-deploy/templates/fd.origin.json
      #    parameters: frontDoorName="${{ env.FRONT_DOOR_NAME }}" originGroupName="${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}" originName=${{ matrix.region }} hostName=${{ env.APIM_SERVICE_HOSTNAME }}

      #- name: Deploy Front Door Route
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
      #    deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ENDPOINT_NAME }}-${{ env.FRONT_DOOR_ROUTE_NAME }}-${{ matrix.region }}
      #    template: ./src/infra-deploy/templates/fd.route.json
      #    parameters: frontDoorName="${{env.FRONT_DOOR_NAME}}" endpointName="${{env.FRONT_DOOR_ENDPOINT_NAME}}" routeName="${{ env.FRONT_DOOR_ROUTE_NAME }}" originGroupId="${{ env.FRONT_DOOR_ORIGIN_GROUP_ID }}"


      - name: Azure logout
        run: |
          az logout
