name: Deploy Region Stamp

on: 
  workflow_dispatch:

env:
  RBAC_ROLE_ID_READER: 'acdd72a7-3385-48ef-bd42-f606fba81ae7'
  RBAC_ROLE_ID_NETWORK_CONTRIBUTOR: '4d97b98b-1d4f-4787-a291-c67834d212e7'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'
  DDOS_PLAN_NAME: 'pz-ao'

  NSG_IN_SRC: '75.68.47.183/32'

  AVL_ZONES: '1,2,3'

  IDENTITY_TYPE: 'UserAssigned'

  LA_WORKSPACE_NAME: 'pz-ao'

  VNET_PREFIX: '10.0.0.0/16'
  VNET_ENABLE_DDOS: 'true'
  APIM_SUBNET_NAME: 'Apim'
  APIM_SUBNET_PREFIX: '10.0.1.0/24'
  APIM_SUBNET_FRONTDOOR_INBOUND_ONLY: 'true'
  APPGW_SUBNET_NAME: 'AppGw'
  APPGW_SUBNET_PREFIX: '10.0.2.0/24'
  APP_SUBNET_NAME: 'App'
  APP_SUBNET_PREFIX: '10.0.5.0/24'
  APP_SUBNET_SERVICE_ENDPOINTS: 'Microsoft.AzureCosmosDB,Microsoft.EventHub,Microsoft.KeyVault'

  EVENT_HUB_CAPACITY: '1'
  EVENT_HUB_EVENT_HUB_NAME: 'eh1'
  EVENT_HUB_CONSUMER_GROUP_NAME: 'ao'

  AKS_ZONES_FOR_CLI: '1 2 3'
  AKS_VERSION: '1.20.5'
  AKS_NET_PLUGIN: 'kubenet'
  AKS_SERVICE_CIDR: '10.1.0.0/16'
  AKS_DNS_SERVICE_IP: '10.1.0.10'
  AKS_POD_CIDR: '10.241.0.0/16'
  AKS_DOCKER_BRIDGE_ADDRESS: '172.17.0.1/16'

  AKS_SYSTEM_POOL_NODE_COUNT: '1'
  AKS_SYSTEM_POOL_AUTOSCALE: 'true'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN: '2'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX: '10'
  AKS_SYSTEM_POOL_NODE_SIZE: 'Standard_DS2_v2'

  AKS_USER_POOL_DEPLOY: 'true'
  AKS_USER_POOL_NODE_NAME: 'userpool1'
  AKS_USER_POOL_NODE_COUNT: '1'
  AKS_USER_POOL_AUTOSCALE: 'true'
  AKS_USER_POOL_AUTOSCALE_COUNT_MIN: '2'
  AKS_USER_POOL_AUTOSCALE_COUNT_MAX: '10'
  AKS_USER_POOL_NODE_SIZE: 'Standard_DS2_v2'

  APPGW_SKU_NAME: 'Standard_v2'

jobs:
  rgs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus]
    steps:
      - name: Install CLI extensions
        if: success()
        run: |
          az extension add --name aks-preview
          az extension add --name application-insights
          az extension add --name front-door

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          INFIX=$GITHUB_RUN_ID
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          AKS_CLUSTER_NAME=pz-ao-${{ matrix.region }}

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV

          echo "APP_NSG_NAME=ao-app-${{ matrix.region }}" >> $GITHUB_ENV
          echo "APIM_NSG_NAME=ao-apim-${{ matrix.region }}" >> $GITHUB_ENV

          echo "VNET_NAME=ao-${{ matrix.region }}" >> $GITHUB_ENV

          echo "KEY_VAULT_NAME=pz-ao-${{ matrix.region }}-${{ env.INFIX }}" >> $GITHUB_ENV

          echo "EVENT_HUB_NS_NAME=pz-ao-${{ matrix.region }}" >> $GITHUB_ENV

          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_DNS_PREFIX=pzao${{ matrix.region }}" >> $GITHUB_ENV

          echo "APPGW_NAME=pz-ao-${{ matrix.region }}" >> $GITHUB_ENV
          echo "APPGW_PUBLIC_IP_NAME=pz-ao-appgw-${{ matrix.region }}" >> $GITHUB_ENV

          echo "APIM_SERVICE_NAME=pz-ao-apim-${{ matrix.region }}" >> $GITHUB_ENV
          echo "APIM_PUBLIC_IP_NAME=pz-ao-apim-${{ matrix.region }}" >> $GITHUB_ENV

          echo "AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP-$AKS_CLUSTER_NAME" >> $GITHUB_ENV

          echo "UAMI_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "UAMI_PRINCIPAL_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'principalId')" >> $GITHUB_ENV

          echo "LA_WORKSPACE_ID=$(az monitor log-analytics workspace show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.LA_WORKSPACE_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

          echo "APP_INSIGHTS_ID=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app ${{ env.APP_INSIGHTS_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_INSIGHTS_INSTRUMENTATION_KEY=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app ${{ env.APP_INSIGHTS_NAME }} -o tsv --query 'instrumentationKey')" >> $GITHUB_ENV

      - name: Create Azure resource group
        if: success()
        run: |
          az group create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location ${{ matrix.region }} --name ${{ env.AZURE_RESOURCE_GROUP }}

      #- name: Deploy NSG for APIM Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/apim.nsg.json
      #    parameters: location=${{ matrix.region }} nsgName=${{ env.APIM_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }} allowTrafficOnlyFromFrontDoor=${{ env.APIM_SUBNET_FRONTDOOR_INBOUND_ONLY }}

      #- name: Deploy NSG for APIM Subnet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.nsg.diagnostics.json
      #    parameters: nsgName=${{ env.APIM_NSG_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Deploy NSG for App Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.nsg.json
      #    parameters: location=${{ matrix.region }} nsgName=${{ env.APP_NSG_NAME }} nsgRuleInbound100Src=${{ env.NSG_IN_SRC }}

      #- name: Deploy NSG for App Subnet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.nsg.diagnostics.json
      #    parameters: nsgName=${{ env.APP_NSG_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"


      #- name: Deploy VNet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.vnet.json
      #    parameters: |
      #      location=${{ matrix.region }} vnetName=${{ env.VNET_NAME }} vnetPrefix=${{ env.VNET_PREFIX }} enableDdosProtection=${{ env.VNET_ENABLE_DDOS }} ddosProtectionPlanResourceGroup=${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} ddosProtectionPlanName=${{ env.DDOS_PLAN_NAME }}

      #- name: Grant UAMI Network Contributor on VNet for kubenet config
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/authorization.role-assignment.json
      #    parameters: roleDefinitionId="${{ env.RBAC_ROLE_ID_NETWORK_CONTRIBUTOR }}" principalId="${{ env.UAMI_PRINCIPAL_ID }}" resourceType="Microsoft.Network/virtualNetworks" resourceName="${{ env.VNET_NAME }}"

      #- name: Deploy VNet Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.vnet.diagnostics.json
      #    parameters: vnetName=${{ env.VNET_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Deploy APIM Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APIM_SUBNET_NAME }} subnetPrefix=${{ env.APIM_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APIM_NSG_NAME }}

      #- name: Deploy AppGW Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APPGW_SUBNET_NAME }} subnetPrefix=${{ env.APPGW_SUBNET_PREFIX }}

      #- name: Deploy App Subnet
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.vnet.subnet.json
      #    parameters: vnetName=${{ env.VNET_NAME }} subnetName=${{ env.APP_SUBNET_NAME }} subnetPrefix=${{ env.APP_SUBNET_PREFIX }} nsgResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} nsgName=${{ env.APP_NSG_NAME }} serviceEndpoints=${{ env.APP_SUBNET_SERVICE_ENDPOINTS }}

      #- name: Get App Subnet Resource ID
      #  if: success()
      #  run: |
      #    echo "APP_SUBNET_ID=$(az network vnet subnet show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --vnet-name ${{ env.VNET_NAME }} -n ${{ env.APP_SUBNET_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      #- name: Deploy Key Vault
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/key-vault.json
      #    parameters: location=${{ matrix.region }} tenantId=${{ secrets.AZURE_TENANT_ID }} keyVaultName=${{ env.KEY_VAULT_NAME }}

      #- name: Deploy Key Vault Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/key-vault.diagnostics.json
      #    parameters: keyVaultName=${{ env.KEY_VAULT_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"


      #- name: Deploy Event Hub
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} capacity=${{ env.EVENT_HUB_CAPACITY }}

      #- name: Deploy Event Hub Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.diagnostics.json
      #    parameters: namespaceName=${{ env.EVENT_HUB_NS_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Deploy Event Hub NS Send Auth Rule
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.ns-auth-rule.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} rights="Send" ruleName="Send"

      #- name: Deploy Event Hub NS Listen Auth Rule
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.ns-auth-rule.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} rights="Listen" ruleName="Listen"

      #- name: Deploy Event Hub, um, Event Hub
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.event-hub.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }}

      #- name: Deploy Event Hub Consumer Group
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.consumer-group.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} eventHubName=${{ env.EVENT_HUB_EVENT_HUB_NAME }} consumerGroupName=${{ env.EVENT_HUB_CONSUMER_GROUP_NAME }}

      #- name: Deploy Event Hub Network Rule Set
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.network-rule-set.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }}

      #- name: Deploy Event Hub VNet Rule
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/event-hub.vnet-rule.json
      #    parameters: location=${{ matrix.region }} namespaceName=${{ env.EVENT_HUB_NS_NAME }} subnetResourceId=${{ env.APP_SUBNET_ID }}


      #- name: Deploy Public IP for App GW
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.public-ip.json
      #    parameters: location=${{ matrix.region }} publicIpName="${{ env.APPGW_PUBLIC_IP_NAME }}" availabilityZones="${{ env.AVL_ZONES }}" publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APPGW_PUBLIC_IP_NAME }}

      #- name: Deploy Public IP for App GW Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.public-ip.diagnostics.json
      #    parameters: publicIpName="${{ env.APPGW_PUBLIC_IP_NAME }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Get App GW Public IP for AKS API Server Network Restriction
      #  if: success()
      #  run: |
      #    APPGW_PUBLIC_IP_ADDRESS="$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'ipAddress')"
      #    echo "AKS_API_SERVER_AUTH_IP_RANGES=$APPGW_PUBLIC_IP_ADDRESS/32,${{ env.NSG_IN_SRC }}" >> $GITHUB_ENV


      #- name: Deploy App GW
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.app-gw.json
      #    parameters: location=${{ matrix.region }} appGatewayName="${{ env.APPGW_NAME }}" skuName="${{ env.APPGW_SKU_NAME }}" availabilityZones="${{ env.AVL_ZONES }}" managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} vnetResourceGroup="${{ env.AZURE_RESOURCE_GROUP }}" vnetName="${{ env.VNET_NAME }}" subnetName="${{ env.APPGW_SUBNET_NAME }}" publicIpResourceGroup="${{ env.AZURE_RESOURCE_GROUP }}" publicIpName="${{ env.APPGW_PUBLIC_IP_NAME }}"

      #- name: Deploy App GW Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.app-gw.diagnostics.json
      #    parameters: appGatewayName="${{ env.APPGW_NAME }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Get App GW Resource ID
      #  if: success()
      #  run: echo "APPGW_ID=$(az network application-gateway show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      ## ARM Template - but does not support kubelet identity
      ##- name: Deploy AKS Cluster (ARM)
      ##  if: success()
      ##  uses: azure/arm-deploy@v1
      ##  with:
      ##    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      ##    template: ./templates/aks.cluster.json
      ##    parameters: location=${{ matrix.region }} k8sversion=${{ env.AKS_VERSION }} clusterName=${{ env.AKS_CLUSTER_NAME }} dnsPrefix=${{ env.AKS_DNS_PREFIX }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} availabilityZones="${{ env.AVL_ZONES }}" nodeResourceGroup="${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}" nodeCount=${{ env.AKS_SYSTEM_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_SYSTEM_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_SYSTEM_POOL_NODE_SIZE }} nodeAdminUsername=${{ secrets.ADMIN_USERNAME }} sshRSAPublicKey="${{ secrets.SSH_KEY }}" subnetResourceId=${{ env.APP_SUBNET_ID }} networkPlugin="${{ env.AKS_NET_PLUGIN }}" serviceCidr="${{ env.AKS_SERVICE_CIDR }}" dnsServiceIp="${{ env.AKS_DNS_SERVICE_IP }}" podCidr="${{ env.AKS_POD_CIDR }}" dockerBridgeCidr="${{ env.AKS_DOCKER_BRIDGE_ADDRESS }}" apiServerAuthorizedIpRanges="${{ env.AKS_API_SERVER_AUTH_IP_RANGES }}"

      ## az cli since that is current support for kubelet identity - replace this with ARM template when that supports kubelet identity
      #- name: Deploy AKS Cluster (CLI) if autoscaler enabled
      #  if: ${{ success() && (env.AKS_SYSTEM_POOL_AUTOSCALE == 'true') }}
      #  run: |
      #    az aks create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g "${{ env.AZURE_RESOURCE_GROUP }}" -l "${{ matrix.region }}" --verbose \
      #      -n "${{ env.AKS_CLUSTER_NAME }}" --zones ${{ env.AKS_ZONES_FOR_CLI }} --kubernetes-version "${{ env.AKS_VERSION }}" --dns-name-prefix "${{ env.AKS_DNS_PREFIX }}" \
      #      --enable-managed-identity --assign-identity "${{ env.UAMI_ID }}" --assign-kubelet-identity "${{ env.UAMI_ID }}" \
      #      --node-resource-group "${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}" --node-vm-size "${{ env.AKS_SYSTEM_POOL_NODE_SIZE }}" \
      #      --admin-username "${{ secrets.ADMIN_USERNAME }}" --ssh-key-value "${{ secrets.SSH_KEY }}" \
      #      --vnet-subnet-id "${{ env.APP_SUBNET_ID }}" --api-server-authorized-ip-ranges "${{ env.AKS_API_SERVER_AUTH_IP_RANGES }}" \
      #      --network-plugin "${{ env.AKS_NET_PLUGIN }}" --service-cidr "${{ env.AKS_SERVICE_CIDR }}" --dns-service-ip "${{ env.AKS_DNS_SERVICE_IP }}" --pod-cidr "${{ env.AKS_POD_CIDR }}" --docker-bridge-address "${{ env.AKS_DOCKER_BRIDGE_ADDRESS }}" \
      #      --enable-cluster-autoscaler --min-count=${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN }} --max-count ${{ env.AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX }}

      #- name: Deploy AKS Cluster (CLI) if autoscaler NOT enabled
      #  if: ${{ success() && (env.AKS_SYSTEM_POOL_AUTOSCALE == 'false') }}
      #  run: |
      #    az aks create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g "${{ env.AZURE_RESOURCE_GROUP }}" -l "${{ matrix.region }}" --verbose \
      #      -n "${{ env.AKS_CLUSTER_NAME }}" --zones ${{ env.AKS_ZONES_FOR_CLI }} --kubernetes-version "${{ env.AKS_VERSION }}" --dns-name-prefix "${{ env.AKS_DNS_PREFIX }}" \
      #      --enable-managed-identity --assign-identity "${{ env.UAMI_ID }}" --assign-kubelet-identity "${{ env.UAMI_ID }}" \
      #      --node-resource-group "${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}" --node-vm-size "${{ env.AKS_SYSTEM_POOL_NODE_SIZE }}" \
      #      --admin-username "${{ secrets.ADMIN_USERNAME }}" --ssh-key-value "${{ secrets.SSH_KEY }}" \
      #      --vnet-subnet-id "${{ env.APP_SUBNET_ID }}" --api-server-authorized-ip-ranges "${{ env.AKS_API_SERVER_AUTH_IP_RANGES }}" \
      #      --network-plugin "${{ env.AKS_NET_PLUGIN }}" --service-cidr "${{ env.AKS_SERVICE_CIDR }}" --dns-service-ip "${{ env.AKS_DNS_SERVICE_IP }}" --pod-cidr "${{ env.AKS_POD_CIDR }}" --docker-bridge-address "${{ env.AKS_DOCKER_BRIDGE_ADDRESS }}" \
      #      --node-count ${{ env.AKS_SYSTEM_POOL_NODE_COUNT }}

      #- name: Deploy AKS Cluster Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/aks.cluster.diagnostics.json
      #    parameters: clusterName=${{ env.AKS_CLUSTER_NAME }} logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"

      #- name: Get AKS Cluster Resource ID
      #  if: success()
      #  run: echo "AKS_CLUSTER_ID=$(az aks show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      #- name: Grant UAMI Reader on AKS Nodes RG for Pod Managed Identity after AKS Deploy creates the RG
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_AKS_NODES }}
      #    template: ./templates/authorization.role-assignment.json
      #    parameters: roleDefinitionId="${{ env.RBAC_ROLE_ID_READER }}" principalId="${{ env.UAMI_PRINCIPAL_ID }}"

      #- name: Deploy AKS User Node Pool
      #  if: ${{ success() && (env.AKS_USER_POOL_DEPLOY == 'true') }}
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/aks.node-pool.json
      #    parameters: location=${{ matrix.region }} clusterName=${{ env.AKS_CLUSTER_NAME }} availabilityZones="${{ env.AVL_ZONES }}" nodePoolMode=User nodePoolName="${{ env.AKS_USER_POOL_NODE_NAME }}" nodeCount=${{ env.AKS_USER_POOL_NODE_COUNT }} enableNodeAutoscale=${{ env.AKS_USER_POOL_AUTOSCALE }} nodeCountMin=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MIN }} nodeCountMax=${{ env.AKS_USER_POOL_AUTOSCALE_COUNT_MAX }} nodeVmSize=${{ env.AKS_USER_POOL_NODE_SIZE }} subnetResourceId=${{ env.APP_SUBNET_ID }}

      #- name: Configure AKS Add-ons - Monitoring, AGIC
      #  if: success()
      #  run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a monitoring,ingress-appgw --workspace-resource-id ${{ env.LA_WORKSPACE_ID }} --appgw-id "${{ env.APPGW_ID }}"

      #- name: Enabled Pod Managed identity
      #  if: success()
      #  run: |
      #    az aks update --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} --enable-pod-identity --enable-pod-identity-with-kubenet

      #- name: Add Pod Identity
      #  if: success()
      #  run: |
      #    az aks pod-identity add -g ${{ env.AZURE_RESOURCE_GROUP }} --cluster-name ${{ env.AKS_CLUSTER_NAME }} --namespace "default" --name ${{ env.UAMI_NAME }} --identity-resource-id ${{ env.UAMI_ID }}

      ##- name: Get AKS credentials and kubectl
      ##  if: success()
      ##  run: |
      ##    az aks get-credentials --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing


      #- name: Deploy Public IP for APIM Service
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.public-ip.json
      #    parameters: location=${{ matrix.region }} publicIpName="${{ env.APIM_PUBLIC_IP_NAME }}" availabilityZones="${{ env.AVL_ZONES }}" publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APIM_PUBLIC_IP_NAME }}

      #- name: Deploy Public IP for APIM Service Diagnostics
      #  if: success()
      #  uses: azure/arm-deploy@v1
      #  with:
      #    resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
      #    template: ./templates/net.public-ip.diagnostics.json
      #    parameters: publicIpName="${{ env.APIM_PUBLIC_IP_NAME }}" logAnalyticsWorkspaceResourceId="${{ env.LA_WORKSPACE_ID }}"


      - name: Azure logout
        run: |
          az logout
