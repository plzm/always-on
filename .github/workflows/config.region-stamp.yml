name: Deploy Always On Region Stamp

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '18'

  RBAC_ROLE_ID_READER: 'acdd72a7-3385-48ef-bd42-f606fba81ae7'
  RBAC_ROLE_ID_NETWORK_CONTRIBUTOR: '4d97b98b-1d4f-4787-a291-c67834d212e7'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'

  UAMI_NAME: '$PREFIX-uami'
  DDOS_PLAN_NAME: '$PREFIX'
  LA_WORKSPACE_NAME: '$PREFIX'
  APP_INSIGHTS_NAME: '$PREFIX'
  FRONT_DOOR_NAME: '$PREFIX'

  NSG_IN_SRC: '75.68.47.183/32'

  AVL_ZONES: '1,2,3'

  IDENTITY_TYPE: 'UserAssigned'

  VNET_PREFIX: '10.0.0.0/16'
  VNET_ENABLE_DDOS: 'false'
  APIM_SUBNET_NAME: 'Apim'
  APIM_SUBNET_PREFIX: '10.0.1.0/24'
  APIM_SUBNET_FRONTDOOR_INBOUND_ONLY: 'true'
  APPGW_SUBNET_NAME: 'AppGw'
  APPGW_SUBNET_PREFIX: '10.0.2.0/24'
  APP_SUBNET_NAME: 'App'
  APP_SUBNET_PREFIX: '10.0.5.0/24'
  APP_SUBNET_SERVICE_ENDPOINTS: 'Microsoft.AzureCosmosDB,Microsoft.EventHub,Microsoft.KeyVault'

  EVENT_HUB_CAPACITY: '1'
  EVENT_HUB_EVENT_HUB_NAME: 'eh1'
  EVENT_HUB_CONSUMER_GROUP_NAME: 'ao'

  AKS_ZONES_FOR_CLI: '1 2 3'
  AKS_VERSION: '1.20.5'
  AKS_NET_PLUGIN: 'kubenet'
  AKS_SERVICE_CIDR: '10.1.0.0/16'
  AKS_DNS_SERVICE_IP: '10.1.0.10'
  AKS_POD_CIDR: '10.241.0.0/16'
  AKS_DOCKER_BRIDGE_ADDRESS: '172.17.0.1/16'

  AKS_SYSTEM_POOL_NODE_COUNT: '1'
  AKS_SYSTEM_POOL_AUTOSCALE: 'true'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MIN: '1'
  AKS_SYSTEM_POOL_AUTOSCALE_COUNT_MAX: '5'
  AKS_SYSTEM_POOL_NODE_SIZE: 'Standard_DS2_v2'

  AKS_USER_POOL_DEPLOY: 'true'
  AKS_USER_POOL_NODE_NAME: 'userpool1'
  AKS_USER_POOL_NODE_COUNT: '0'
  AKS_USER_POOL_AUTOSCALE: 'true'
  AKS_USER_POOL_AUTOSCALE_COUNT_MIN: '0'
  AKS_USER_POOL_AUTOSCALE_COUNT_MAX: '10'
  AKS_USER_POOL_NODE_SIZE: 'Standard_DS2_v2'

  APPGW_SKU_NAME: 'Standard_v2'

  APIM_SKU_NAME: 'Developer'
  #APIM_SKU_NAME: 'Premium'
  APIM_VNET_TYPE: 'External'
  APIM_SCALE_UNITS: 3
  APIM_API_VERSION_SET_NAME: 'conference_api_vs'
  APIM_API_VERSION_SET_DESCRIPTION: 'Conference API Description'
  APIM_API_NAME: 'demo-conference-api'
  APIM_API_DESCRIPTION: 'Foo'
  APIM_API_SERVICE_URL: 'https://conferenceapi.azurewebsites.net'
  APIM_API_SERVICE_PATH: 'conference'

  FRONT_DOOR_ORIGIN_GROUP_NAME: 'apims'
  FRONT_DOOR_ROUTE_NAME: 'api'

jobs:
  deploy-stamp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [eastus, westus2]
    steps:
      - name: Install Azure CLI extensions
        run: |
          az extension add --name aks-preview
          az extension add --name application-insights
          az extension add --name front-door

      - name: Checkout repository
        if: success()
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV

          echo "APP_NSG_NAME=ao-app-${{ matrix.region }}" >> $GITHUB_ENV
          echo "APIM_NSG_NAME=ao-apim-${{ matrix.region }}" >> $GITHUB_ENV

          echo "VNET_NAME=ao-${{ matrix.region }}" >> $GITHUB_ENV

          echo "KEY_VAULT_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}" >> $GITHUB_ENV

          echo "EVENT_HUB_NS_NAME=${{ env.PREFIX }}-${{ matrix.region }}" >> $GITHUB_ENV

          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "AKS_DNS_PREFIX=${PREFIX//-/}${{ matrix.region }}" >> $GITHUB_ENV

          echo "APPGW_NAME=${{ env.PREFIX }}-${{ matrix.region }}" >> $GITHUB_ENV
          echo "APPGW_PUBLIC_IP_NAME=${{ env.PREFIX }}-appgw-${{ matrix.region }}" >> $GITHUB_ENV

          echo "APIM_SERVICE_NAME=${{ env.PREFIX }}-${{ matrix.region }}-${{ env.SUFFIX }}" >> $GITHUB_ENV
          echo "APIM_PUBLIC_IP_NAME=${{ env.PREFIX }}-apim-${{ matrix.region }}" >> $GITHUB_ENV

          echo "AZURE_RESOURCE_GROUP_AKS_NODES=$AZURE_RESOURCE_GROUP-$AKS_CLUSTER_NAME" >> $GITHUB_ENV

          echo "AZURE_CRED_SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.SP_CLIENT_ID }} -o tsv --query 'objectId')" >> $GITHUB_ENV

          echo "UAMI_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "UAMI_PRINCIPAL_ID=$(az identity show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.UAMI_NAME }} -o tsv --query 'principalId')" >> $GITHUB_ENV

          echo "LA_WORKSPACE_ID=$(az monitor log-analytics workspace show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n ${{ env.LA_WORKSPACE_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

          echo "APP_INSIGHTS_ID=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app ${{ env.APP_INSIGHTS_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APP_INSIGHTS_INSTRUMENTATION_KEY=$(az monitor app-insights component show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} --app ${{ env.APP_INSIGHTS_NAME }} -o tsv --query 'instrumentationKey')" >> $GITHUB_ENV

          echo "FRONT_DOOR_ORIGIN_GROUP_ID=$(az afd origin-group show --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} -g ${{env.AZURE_RESOURCE_GROUP_GLOBAL}} --profile-name ${{env.FRONT_DOOR_NAME}} --origin-group-name ${{env.FRONT_DOOR_ORIGIN_GROUP_NAME}} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "FRONT_DOOR_ENDPOINT_NAME=${FRONT_DOOR_NAME//-/}" >> $GITHUB_ENV


      - name: Grant Key Vault access permissions to current authentication context to get/set/list certs, secrets and keys
        if: success()
        run: |
          az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
            -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
            --object-id ${{ env.AZURE_CRED_SP_OBJECT_ID }} \
            --key-permissions backup create decrypt delete encrypt get import list purge recover restore sign unwrapKey update verify wrapKey \
            --secret-permissions backup delete get list purge recover restore set \
            --certificate-permissions backup create delete deleteissuers get getissuers import list listissuers managecontacts manageissuers purge recover restore setissuers update

      - name: Grant Key Vault access permissions to UAMI to get certs, secrets and keys
        if: success()
        run: |
          az keyvault set-policy --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --verbose \
            -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.KEY_VAULT_NAME }} \
            --object-id ${{ env.UAMI_PRINCIPAL_ID }} \
            --key-permissions get \
            --secret-permissions get \
            --certificate-permissions get



      - name: Get App GW Public IP for AKS API Server Network Restriction
        if: success()
        run: |
          APPGW_PUBLIC_IP_ADDRESS="$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'ipAddress')"
          echo "AKS_API_SERVER_AUTH_IP_RANGES=$APPGW_PUBLIC_IP_ADDRESS/32,${{ env.NSG_IN_SRC }}" >> $GITHUB_ENV


      - name: Get App GW Resource ID
        if: success()
        run: echo "APPGW_ID=$(az network application-gateway show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV


      - name: Get AKS Cluster Resource ID
        if: success()
        run: echo "AKS_CLUSTER_ID=$(az aks show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV

      - name: Configure AKS Add-ons - Monitoring, AGIC
        if: success()
        run: az aks enable-addons --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} -a monitoring,ingress-appgw --workspace-resource-id ${{ env.LA_WORKSPACE_ID }} --appgw-id ${{ env.APPGW_ID }}

      - name: Enable Pod Managed identity
        if: success()
        run: az aks update --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} --enable-pod-identity --enable-pod-identity-with-kubenet

      - name: Add Pod Identity
        if: success()
        run: az aks pod-identity add -g ${{ env.AZURE_RESOURCE_GROUP }} --cluster-name ${{ env.AKS_CLUSTER_NAME }} --namespace "default" --name ${{ env.UAMI_NAME }} --identity-resource-id ${{ env.UAMI_ID }}

      - name: Get AKS credentials and kubectl
        if: success()
        run: az aks get-credentials --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing


      - name: Deploy Public IP for APIM Service
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}
          template: ./templates/net.public-ip.json
          parameters: location=${{ matrix.region }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} availabilityZones=${{ env.AVL_ZONES }} publicIpType="Static" publicIpSku="Standard" domainNameLabel=${{ env.APIM_PUBLIC_IP_NAME }}

      - name: Deploy Public IP for APIM Service Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_PUBLIC_IP_NAME }}-diag
          template: ./templates/net.public-ip.diagnostics.json
          parameters: publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy APIM Service
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}
          template: ./templates/apim.service.json
          parameters: location=${{ matrix.region }} apimServiceName=${{ env.APIM_SERVICE_NAME }} skuName=${{ env.APIM_SKU_NAME }} availabilityZones=${{ env.AVL_ZONES }} scaleUnits=${{ env.APIM_SCALE_UNITS }} managedIdentityType=${{ env.IDENTITY_TYPE }} identityResourceId=${{ env.UAMI_ID }} publicIpResourceGroup=${{ env.AZURE_RESOURCE_GROUP }} publicIpName=${{ env.APIM_PUBLIC_IP_NAME }} virtualNetworkType=${{ env.APIM_VNET_TYPE }} subnetResourceId=${{ env.APIM_SUBNET_ID }}

      - name: Deploy APIM Service Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-diag
          template: ./templates/apim.service.diagnostics.json
          parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Deploy APIM API Version Set
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-version-set
          template: ./templates/apim.api-version-set.json
          parameters: apimServiceName="${{ env.APIM_SERVICE_NAME }}" displayName="${{ env.APIM_API_VERSION_SET_NAME }}" description="${{ env.APIM_API_VERSION_SET_DESCRIPTION }}"

      - name: Get APIM API Version Set Resource ID
        if: success()
        run: echo "APIM_API_VERSION_SET_ID=$(az apim api versionset list --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} --service-name "${{ env.APIM_SERVICE_NAME }}" -o tsv --query '[0].id')" >> $GITHUB_ENV

      - name: Deploy APIM Logger
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-logger
          template: ./templates/apim.logger.json
          parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} loggerName=${{ env.APP_INSIGHTS_NAME }} logTargetResourceId=${{ env.APP_INSIGHTS_ID }} appInsightsTargetInstrumentationKey=${{ env.APP_INSIGHTS_INSTRUMENTATION_KEY }}

      - name: Deploy APIM API (does NOT import API operations - TODO)
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          deploymentName: ${{ env.APIM_SERVICE_NAME }}-api
          template: ./templates/apim.api.json
          parameters: apimServiceName=${{ env.APIM_SERVICE_NAME }} apiName=${{ env.APIM_API_NAME }} displayName=${{ env.APIM_API_NAME }} description="${{ env.APIM_API_DESCRIPTION }}" serviceUrl=${{ env.APIM_API_SERVICE_URL }} path=${{ env.APIM_API_SERVICE_PATH }} apiVersionSetResourceId=${{ env.APIM_API_VERSION_SET_ID }}

      - name: Get APIM Info
        if: success()
        run: |
          echo "APIM_SERVICE_ID=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'id')" >> $GITHUB_ENV
          echo "APIM_SERVICE_HOSTNAME=$(az apim show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APIM_SERVICE_NAME }} -o tsv --query 'hostnameConfigurations[0].hostName')" >> $GITHUB_ENV


      - name: Deploy Front Door Origin
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
          deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}-${{ matrix.region }}
          template: ./templates/fd.origin.json
          parameters: frontDoorName="${{ env.FRONT_DOOR_NAME }}" originGroupName="${{ env.FRONT_DOOR_ORIGIN_GROUP_NAME }}" originName=${{ matrix.region }} hostName=${{ env.APIM_SERVICE_HOSTNAME }}

      - name: Deploy Front Door Route
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }}
          deploymentName: ${{ env.FRONT_DOOR_NAME }}-${{ env.FRONT_DOOR_ENDPOINT_NAME }}-${{ env.FRONT_DOOR_ROUTE_NAME }}-${{ matrix.region }}
          template: ./templates/fd.route.json
          parameters: frontDoorName="${{env.FRONT_DOOR_NAME}}" endpointName="${{env.FRONT_DOOR_ENDPOINT_NAME}}" routeName="${{ env.FRONT_DOOR_ROUTE_NAME }}" originGroupId="${{ env.FRONT_DOOR_ORIGIN_GROUP_ID }}"


      - name: Azure logout
        run: |
          az logout
