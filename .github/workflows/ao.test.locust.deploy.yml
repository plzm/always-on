name: AO.Test.Locust.Deploy

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'

  AZURE_RESOURCE_GROUP_GLOBAL: 'always-on-global'
  AZURE_LOCATION_GLOBAL: 'eastus2'

  STORAGE_ACCT_SKU_NAME: 'Standard_RAGZRS'
  STORAGE_FILE_SHARE_NAME_TESTS: 'locust'

  LOCUST_WORKERS: 50
  LOCUST_USERS: 1500
  LOCUST_USERS_SPAWN_RATE: 75

  LOCUST_FILE_NAME: 'locustfile.py'
  LOCUST_FILE_PATH: './tools/locust/$LOCUST_FILE_NAME'
  LOCUST_RUNTIME: '30m'

  RBAC_ROLE_STORAGE_BLOB_DATA_CONTRIBUTOR: 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'

jobs:
  prep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP_TEST_RESULTS="always-on-tests"
          AZURE_RESOURCE_GROUP_TESTS="always-on-tests-"$GITHUB_RUN_NUMBER

          LA_WORKSPACE_NAME=${{ env.PREFIX }}

          STORAGE_ACCT_NAME=${PREFIX//-/}tests

          echo "AZURE_RESOURCE_GROUP_TEST_RESULTS=$AZURE_RESOURCE_GROUP_TEST_RESULTS" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_TESTS=$AZURE_RESOURCE_GROUP_TESTS" >> $GITHUB_ENV
          echo "STORAGE_ACCT_NAME=$STORAGE_ACCT_NAME" >> $GITHUB_ENV

          echo "LA_WORKSPACE_ID=$(az monitor log-analytics workspace show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP_GLOBAL }} -n $LA_WORKSPACE_NAME -o tsv --query 'id')" >> $GITHUB_ENV

          echo "AZURE_CRED_SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.SP_CLIENT_ID }} -o tsv --query 'objectId')" >> $GITHUB_ENV

      - name: Create Azure resource groups
        if: success()
        run: |
          az group create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location ${{ env.AZURE_LOCATION_GLOBAL }} --name ${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }}
          az group create --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --location ${{ env.AZURE_LOCATION_GLOBAL }} --name ${{ env.AZURE_RESOURCE_GROUP_TESTS }}

      - name: Deploy Storage Account
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }}
          deploymentName: ${{ env.STORAGE_ACCT_NAME }}
          template: ./src/infra-deploy/templates/storage.account.json
          parameters: location=${{ env.AZURE_LOCATION_GLOBAL }} storageAccountName=${{ env.STORAGE_ACCT_NAME }} skuName=${{ env.STORAGE_ACCT_SKU_NAME }} defaultAction=Allow

      - name: Grant Exec Context SBDC on Storage Account
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }}
          deploymentName: ${{ env.STORAGE_ACCT_NAME }}-rbac-sbdc
          template: ./src/infra-deploy/templates/authorization.role-assignment.json
          parameters: roleDefinitionId=${{ env.RBAC_ROLE_STORAGE_BLOB_DATA_CONTRIBUTOR }} principalId=${{ env.AZURE_CRED_SP_OBJECT_ID }}

      - name: Deploy File Share for Locust results to test results Storage Account
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }}
          deploymentName: ${{ env.STORAGE_ACCT_NAME }}-${{ env.STORAGE_FILE_SHARE_NAME_TESTS }}
          template: ./src/infra-deploy/templates/storage.file-share.json
          parameters: storageAccountName=${{ env.STORAGE_ACCT_NAME }} fileShareName=${{ env.STORAGE_FILE_SHARE_NAME_TESTS }}

      - name: Deploy Storage Account Diagnostics
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }}
          deploymentName: ${{ env.STORAGE_ACCT_NAME }}-diag
          template: ./src/infra-deploy/templates/storage.account.diagnostics.json
          parameters: storageAccountName=${{ env.STORAGE_ACCT_NAME }} logAnalyticsWorkspaceResourceId=${{ env.LA_WORKSPACE_ID }}

      - name: Azure logout
        run: |
          az logout


  locust:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI Extensions
        if: success()
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP_TEST_RESULTS="always-on-tests"
          AZURE_RESOURCE_GROUP_TESTS="always-on-tests-"$GITHUB_RUN_NUMBER

          STORAGE_ACCT_NAME=${PREFIX//-/}tests

          FRONT_DOOR_NAME=${{ env.PREFIX }}
          FRONT_DOOR_ENDPOINT_NAME=$FRONT_DOOR_NAME

          FRONT_DOOR_ENDPOINT_FQDN=$(az afd endpoint show --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} -g ${{env.AZURE_RESOURCE_GROUP_GLOBAL}} --profile-name $FRONT_DOOR_NAME --endpoint-name $FRONT_DOOR_ENDPOINT_NAME -o tsv --query 'hostName')
          API_ENDPOINT=https://$FRONT_DOOR_ENDPOINT_FQDN/api

          echo "AZURE_RESOURCE_GROUP_TEST_RESULTS=$AZURE_RESOURCE_GROUP_TEST_RESULTS" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_TESTS=$AZURE_RESOURCE_GROUP_TESTS" >> $GITHUB_ENV
          echo "STORAGE_ACCT_NAME=$STORAGE_ACCT_NAME" >> $GITHUB_ENV
          echo "API_ENDPOINT=$API_ENDPOINT" >> $GITHUB_ENV

      - name: Upload Locust Test Definition File to File Share
        if: success()
        run: |
            az storage file upload --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --account-name ${{ env.STORAGE_ACCT_NAME }} -s ${{ env.STORAGE_FILE_SHARE_NAME_TESTS }} --source ${{ env.LOCUST_FILE_PATH }} --path ${{ env.LOCUST_FILE_NAME }} --verbose

      - name: Deploy Locust Infrastructure and Start Tests
        if: success()
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP_TESTS }}
          deploymentName: locust
          template: ./src/infra-deploy/templates/locust.json
          parameters: location=${{ env.AZURE_LOCATION_GLOBAL }} hostToTest=${{ env.API_ENDPOINT }} numberOfWorkers=${{ env.LOCUST_WORKERS }} numberOfUsers=${{ env.LOCUST_USERS }} numberOfUsersToSpawnPerSecond=${{ env.LOCUST_USERS_SPAWN_RATE }} runtime=${{ env.LOCUST_RUNTIME }} storageAccountResourceGroup=${{ env.AZURE_RESOURCE_GROUP_TEST_RESULTS }} storageAccountName=${{ env.STORAGE_ACCT_NAME }} fileShareName=${{ env.STORAGE_FILE_SHARE_NAME_TESTS }}

      - name: Azure logout
        run: |
          az logout
