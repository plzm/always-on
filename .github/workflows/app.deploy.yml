name: App - Deploy

on: 
  workflow_dispatch:

env:
  PREFIX: 'pz-ao'
  SUFFIX: '20'

  NSG_IN_SRC: '75.68.47.183/32'

jobs:
  deploy-stamp:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [northeurope]
    steps:
      - name: Install Azure CLI extensions
        run: |
          az extension add --name aks-preview

      - name: Checkout repository
        if: success()
        uses: actions/checkout@v2

      - name: Azure login
        if: success()
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare dynamic env vars
        if: success()
        run: |
          AZURE_RESOURCE_GROUP=always-on-${{ matrix.region }}
          AKS_CLUSTER_NAME=${{ env.PREFIX }}-${{ matrix.region }}

          echo "AZURE_RESOURCE_GROUP=$AZURE_RESOURCE_GROUP" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV

          echo "APPGW_PUBLIC_IP_NAME=${{ env.PREFIX }}-appgw-${{ matrix.region }}" >> $GITHUB_ENV

      #- name: Get AKS credentials
      #  if: success()
      #  run: |
      #    az aks get-credentials --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n "${{ env.AKS_CLUSTER_NAME }}" --overwrite-existing --verbose

      #- name: Deploy app to AKS
      #  if: success()
      #  run: |
      #    kubectl apply -f ../../aks/azure-vote.yaml

      - name: Get App GW Public IP and prepare AKS API Server IP address range restriction
        if: success()
        run: |
          APPGW_PUBLIC_IP_ADDRESS="$(az network public-ip show --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.APPGW_PUBLIC_IP_NAME }} -o tsv --query 'ipAddress')"
          echo "AKS_API_SERVER_AUTH_IP_RANGES=$APPGW_PUBLIC_IP_ADDRESS/32,${{ env.NSG_IN_SRC }}" >> $GITHUB_ENV

      - name: Update AKS control plane authorized IP ranges to open for deploy
        if: success()
        run: |
          az aks update --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n "${{ env.AKS_CLUSTER_NAME }}" --api-server-authorized-ip-ranges "" --verbose

      #- name: Set AKS Context
      #  if: success()
      #  uses: azure/aks-set-context@v1
      #  with:
      #    creds: '${{ secrets.AZURE_CREDENTIALS }}'
      #    resource-group: '${{ env.AZURE_RESOURCE_GROUP }}'
      #    cluster-name: '${{ env.AKS_CLUSTER_NAME }}'

      #- name: Deploy app to AKS
      #  if: success()
      #  uses: Azure/k8s-deploy@v1.4
      #  with:
      #    manifests: 'aks/azure-vote.yaml'
      #    kubectl-version: 'latest'
      #    force: true

      #- name: Update AKS control plane authorized IP ranges to re-secure
      #  if: success()
      #  run: |
      #    az aks update --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} -g ${{ env.AZURE_RESOURCE_GROUP }} -n "${{ env.AKS_CLUSTER_NAME }}" --api-server-authorized-ip-ranges "${{ env.AKS_API_SERVER_AUTH_IP_RANGES }}" --verbose

      - name: Azure logout
        run: |
          az logout
